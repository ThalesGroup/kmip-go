// Code generated by kmipgen; DO NOT EDIT.
package kmip20

import (
	"github.com/gemalto/kmip-go/ttlv"
)

const (
	TagAttributes                         ttlv.Tag = 0x420125
	TagCommonAttributes                   ttlv.Tag = 0x420126
	TagPrivateKeyAttributes               ttlv.Tag = 0x420127
	TagPublicKeyAttributes                ttlv.Tag = 0x420128
	TagExtensionEnumeration               ttlv.Tag = 0x420129
	TagExtensionAttribute                 ttlv.Tag = 0x42012a
	TagExtensionParentStructureTag        ttlv.Tag = 0x42012b
	TagExtensionDescription               ttlv.Tag = 0x42012c
	TagServerName                         ttlv.Tag = 0x42012d
	TagServerSerialNumber                 ttlv.Tag = 0x42012e
	TagServerVersion                      ttlv.Tag = 0x42012f
	TagServerLoad                         ttlv.Tag = 0x420130
	TagProductName                        ttlv.Tag = 0x420131
	TagBuildLevel                         ttlv.Tag = 0x420132
	TagBuildDate                          ttlv.Tag = 0x420133
	TagClusterInfo                        ttlv.Tag = 0x420134
	TagAlternateFailoverEndpoints         ttlv.Tag = 0x420135
	TagShortUniqueIdentifier              ttlv.Tag = 0x420136
	TagReserved                           ttlv.Tag = 0x420137
	TagTag                                ttlv.Tag = 0x420138
	TagCertificateRequestUniqueIdentifier ttlv.Tag = 0x420139
	TagNISTKeyType                        ttlv.Tag = 0x42013a
	TagAttributeReference                 ttlv.Tag = 0x42013b
	TagCurrentAttribute                   ttlv.Tag = 0x42013c
	TagNewAttribute                       ttlv.Tag = 0x42013d
	TagCertificateRequestValue            ttlv.Tag = 0x420140
	TagLogMessage                         ttlv.Tag = 0x420141
	TagProfileVersion                     ttlv.Tag = 0x420142
	TagProfileVersionMajor                ttlv.Tag = 0x420143
	TagProfileVersionMinor                ttlv.Tag = 0x420144
	TagProtectionLevel                    ttlv.Tag = 0x420145
	TagProtectionPeriod                   ttlv.Tag = 0x420146
	TagQuantumSafe                        ttlv.Tag = 0x420147
	TagQuantumSafeCapability              ttlv.Tag = 0x420148
	TagTicket                             ttlv.Tag = 0x420149
	TagTicketType                         ttlv.Tag = 0x42014a
	TagTicketValue                        ttlv.Tag = 0x42014b
	TagRequestCount                       ttlv.Tag = 0x42014c
	TagRights                             ttlv.Tag = 0x42014d
	TagObjects                            ttlv.Tag = 0x42014e
	TagOperations                         ttlv.Tag = 0x42014f
	TagRight                              ttlv.Tag = 0x420150
	TagEndpointRole                       ttlv.Tag = 0x420151
	TagDefaultsInformation                ttlv.Tag = 0x420152
	TagObjectDefaults                     ttlv.Tag = 0x420153
	TagEphemeral                          ttlv.Tag = 0x420154
	TagServerHashedPassword               ttlv.Tag = 0x420155
	TagOneTimePassword                    ttlv.Tag = 0x420156
	TagHashedPassword                     ttlv.Tag = 0x420157
	TagAdjustmentType                     ttlv.Tag = 0x420158
	TagPKCS_11Interface                   ttlv.Tag = 0x420159
	TagPKCS_11Function                    ttlv.Tag = 0x42015a
	TagPKCS_11InputParameters             ttlv.Tag = 0x42015b
	TagPKCS_11OutputParameters            ttlv.Tag = 0x42015c
	TagPKCS_11ReturnCode                  ttlv.Tag = 0x42015d
	TagProtectionStorageMask              ttlv.Tag = 0x42015e
	TagProtectionStorageMasks             ttlv.Tag = 0x42015f
	TagInteropFunction                    ttlv.Tag = 0x420160
	TagInteropIdentifier                  ttlv.Tag = 0x420161
	TagAdjustmentValue                    ttlv.Tag = 0x420162
	TagCommonProtectionStorageMasks       ttlv.Tag = 0x420163
	TagPrivateProtectionStorageMasks      ttlv.Tag = 0x420164
	TagPublicProtectionStorageMasks       ttlv.Tag = 0x420165
)

// Credential Type Enumeration
// 9.1.3.2.1 Table 289
type CredentialType uint32

const (
	CredentialTypeUsernameAndPassword CredentialType = 0x00000001
	CredentialTypeDevice              CredentialType = 0x00000002
	CredentialTypeAttestation         CredentialType = 0x00000003
	CredentialTypeOneTimePassword     CredentialType = 0x00000004
	CredentialTypeHashedPassword      CredentialType = 0x00000005
	CredentialTypeTicket              CredentialType = 0x00000006
)

var CredentialTypeEnum = NewCredentialTypeEnum()

func NewCredentialTypeEnum() ttlv.Enum {
	m := map[CredentialType]string{
		CredentialTypeUsernameAndPassword: "Username and Password",
		CredentialTypeDevice:              "Device",
		CredentialTypeAttestation:         "Attestation",
		CredentialTypeOneTimePassword:     "One Time Password",
		CredentialTypeHashedPassword:      "Hashed Password",
		CredentialTypeTicket:              "Ticket",
	}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (c CredentialType) MarshalText() (text []byte, err error) {
	return []byte(c.String()), nil
}

func (c CredentialType) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(c))
	return nil
}

func (c CredentialType) String() string {
	return ttlv.FormatEnum(uint32(c), &CredentialTypeEnum)
}

// Cryptographic Algorithm Enumeration
// 9.1.3.2.13 Table 301
type CryptographicAlgorithm uint32

const (
	CryptographicAlgorithmDES              CryptographicAlgorithm = 0x00000001
	CryptographicAlgorithmDES3             CryptographicAlgorithm = 0x00000002
	CryptographicAlgorithmAES              CryptographicAlgorithm = 0x00000003
	CryptographicAlgorithmRSA              CryptographicAlgorithm = 0x00000004
	CryptographicAlgorithmDSA              CryptographicAlgorithm = 0x00000005
	CryptographicAlgorithmECDSA            CryptographicAlgorithm = 0x00000006
	CryptographicAlgorithmHMAC_SHA1        CryptographicAlgorithm = 0x00000007
	CryptographicAlgorithmHMAC_SHA224      CryptographicAlgorithm = 0x00000008
	CryptographicAlgorithmHMAC_SHA256      CryptographicAlgorithm = 0x00000009
	CryptographicAlgorithmHMAC_SHA384      CryptographicAlgorithm = 0x0000000a
	CryptographicAlgorithmHMAC_SHA512      CryptographicAlgorithm = 0x0000000b
	CryptographicAlgorithmHMAC_MD5         CryptographicAlgorithm = 0x0000000c
	CryptographicAlgorithmDH               CryptographicAlgorithm = 0x0000000d
	CryptographicAlgorithmECDH             CryptographicAlgorithm = 0x0000000e
	CryptographicAlgorithmECMQV            CryptographicAlgorithm = 0x0000000f
	CryptographicAlgorithmBlowfish         CryptographicAlgorithm = 0x00000010
	CryptographicAlgorithmCamellia         CryptographicAlgorithm = 0x00000011
	CryptographicAlgorithmCAST5            CryptographicAlgorithm = 0x00000012
	CryptographicAlgorithmIDEA             CryptographicAlgorithm = 0x00000013
	CryptographicAlgorithmMARS             CryptographicAlgorithm = 0x00000014
	CryptographicAlgorithmRC2              CryptographicAlgorithm = 0x00000015
	CryptographicAlgorithmRC4              CryptographicAlgorithm = 0x00000016
	CryptographicAlgorithmRC5              CryptographicAlgorithm = 0x00000017
	CryptographicAlgorithmSKIPJACK         CryptographicAlgorithm = 0x00000018
	CryptographicAlgorithmTwofish          CryptographicAlgorithm = 0x00000019
	CryptographicAlgorithmEC               CryptographicAlgorithm = 0x0000001a
	CryptographicAlgorithmOneTimePad       CryptographicAlgorithm = 0x0000001b
	CryptographicAlgorithmChaCha20         CryptographicAlgorithm = 0x0000001c
	CryptographicAlgorithmPoly1305         CryptographicAlgorithm = 0x0000001d
	CryptographicAlgorithmChaCha20Poly1305 CryptographicAlgorithm = 0x0000001e
	CryptographicAlgorithmSHA3_224         CryptographicAlgorithm = 0x0000001f
	CryptographicAlgorithmSHA3_256         CryptographicAlgorithm = 0x00000020
	CryptographicAlgorithmSHA3_384         CryptographicAlgorithm = 0x00000021
	CryptographicAlgorithmSHA3_512         CryptographicAlgorithm = 0x00000022
	CryptographicAlgorithmHMAC_SHA3_224    CryptographicAlgorithm = 0x00000023
	CryptographicAlgorithmHMAC_SHA3_256    CryptographicAlgorithm = 0x00000024
	CryptographicAlgorithmHMAC_SHA3_384    CryptographicAlgorithm = 0x00000025
	CryptographicAlgorithmHMAC_SHA3_512    CryptographicAlgorithm = 0x00000026
	CryptographicAlgorithmSHAKE_128        CryptographicAlgorithm = 0x00000027
	CryptographicAlgorithmSHAKE_256        CryptographicAlgorithm = 0x00000028
	CryptographicAlgorithmARIA             CryptographicAlgorithm = 0x00000029
	CryptographicAlgorithmSEED             CryptographicAlgorithm = 0x0000002a
	CryptographicAlgorithmSM2              CryptographicAlgorithm = 0x0000002b
	CryptographicAlgorithmSM3              CryptographicAlgorithm = 0x0000002c
	CryptographicAlgorithmSM4              CryptographicAlgorithm = 0x0000002d
	CryptographicAlgorithmGOSTR34_10_2012  CryptographicAlgorithm = 0x0000002e
	CryptographicAlgorithmGOSTR34_11_2012  CryptographicAlgorithm = 0x0000002f
	CryptographicAlgorithmGOSTR34_13_2015  CryptographicAlgorithm = 0x00000030
	CryptographicAlgorithmGOST28147_89     CryptographicAlgorithm = 0x00000031
	CryptographicAlgorithmXMSS             CryptographicAlgorithm = 0x00000032
	CryptographicAlgorithmSPHINCS_256      CryptographicAlgorithm = 0x00000033
	CryptographicAlgorithmMcEliece         CryptographicAlgorithm = 0x00000034
	CryptographicAlgorithmMcEliece_6960119 CryptographicAlgorithm = 0x00000035
	CryptographicAlgorithmMcEliece_8192128 CryptographicAlgorithm = 0x00000036
	CryptographicAlgorithmEd25519          CryptographicAlgorithm = 0x00000037
	CryptographicAlgorithmEd448            CryptographicAlgorithm = 0x00000038
)

var CryptographicAlgorithmEnum = NewCryptographicAlgorithmEnum()

func NewCryptographicAlgorithmEnum() ttlv.Enum {
	m := map[CryptographicAlgorithm]string{
		CryptographicAlgorithmDES:              "DES",
		CryptographicAlgorithmDES3:             "3DES",
		CryptographicAlgorithmAES:              "AES",
		CryptographicAlgorithmRSA:              "RSA",
		CryptographicAlgorithmDSA:              "DSA",
		CryptographicAlgorithmECDSA:            "ECDSA",
		CryptographicAlgorithmHMAC_SHA1:        "HMAC-SHA1",
		CryptographicAlgorithmHMAC_SHA224:      "HMAC-SHA224",
		CryptographicAlgorithmHMAC_SHA256:      "HMAC-SHA256",
		CryptographicAlgorithmHMAC_SHA384:      "HMAC-SHA384",
		CryptographicAlgorithmHMAC_SHA512:      "HMAC-SHA512",
		CryptographicAlgorithmHMAC_MD5:         "HMAC-MD5",
		CryptographicAlgorithmDH:               "DH",
		CryptographicAlgorithmECDH:             "ECDH",
		CryptographicAlgorithmECMQV:            "ECMQV",
		CryptographicAlgorithmBlowfish:         "Blowfish",
		CryptographicAlgorithmCamellia:         "Camellia",
		CryptographicAlgorithmCAST5:            "CAST5",
		CryptographicAlgorithmIDEA:             "IDEA",
		CryptographicAlgorithmMARS:             "MARS",
		CryptographicAlgorithmRC2:              "RC2",
		CryptographicAlgorithmRC4:              "RC4",
		CryptographicAlgorithmRC5:              "RC5",
		CryptographicAlgorithmSKIPJACK:         "SKIPJACK",
		CryptographicAlgorithmTwofish:          "Twofish",
		CryptographicAlgorithmEC:               "EC",
		CryptographicAlgorithmOneTimePad:       "One Time Pad",
		CryptographicAlgorithmChaCha20:         "ChaCha20",
		CryptographicAlgorithmPoly1305:         "Poly1305",
		CryptographicAlgorithmChaCha20Poly1305: "ChaCha20Poly1305",
		CryptographicAlgorithmSHA3_224:         "SHA3-224",
		CryptographicAlgorithmSHA3_256:         "SHA3-256",
		CryptographicAlgorithmSHA3_384:         "SHA3-384",
		CryptographicAlgorithmSHA3_512:         "SHA3-512",
		CryptographicAlgorithmHMAC_SHA3_224:    "HMAC-SHA3-224",
		CryptographicAlgorithmHMAC_SHA3_256:    "HMAC-SHA3-256",
		CryptographicAlgorithmHMAC_SHA3_384:    "HMAC-SHA3-384",
		CryptographicAlgorithmHMAC_SHA3_512:    "HMAC-SHA3-512",
		CryptographicAlgorithmSHAKE_128:        "SHAKE-128",
		CryptographicAlgorithmSHAKE_256:        "SHAKE-256",
		CryptographicAlgorithmARIA:             "ARIA",
		CryptographicAlgorithmSEED:             "SEED",
		CryptographicAlgorithmSM2:              "SM2",
		CryptographicAlgorithmSM3:              "SM3",
		CryptographicAlgorithmSM4:              "SM4",
		CryptographicAlgorithmGOSTR34_10_2012:  "GOST R 34.10-2012",
		CryptographicAlgorithmGOSTR34_11_2012:  "GOST R 34.11-2012",
		CryptographicAlgorithmGOSTR34_13_2015:  "GOST R 34.13-2015",
		CryptographicAlgorithmGOST28147_89:     "GOST 28147-89",
		CryptographicAlgorithmXMSS:             "XMSS",
		CryptographicAlgorithmSPHINCS_256:      "SPHINCS-256",
		CryptographicAlgorithmMcEliece:         "McEliece",
		CryptographicAlgorithmMcEliece_6960119: "McEliece-6960119",
		CryptographicAlgorithmMcEliece_8192128: "McEliece-8192128",
		CryptographicAlgorithmEd25519:          "Ed25519",
		CryptographicAlgorithmEd448:            "Ed448",
	}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (c CryptographicAlgorithm) MarshalText() (text []byte, err error) {
	return []byte(c.String()), nil
}

func (c CryptographicAlgorithm) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(c))
	return nil
}

func (c CryptographicAlgorithm) String() string {
	return ttlv.FormatEnum(uint32(c), &CryptographicAlgorithmEnum)
}

// Derivation Method Enumeration
// 9.1.3.2.21 Table 309
type DerivationMethod uint32

const (
	DerivationMethodPBKDF2               DerivationMethod = 0x00000001
	DerivationMethodHASH                 DerivationMethod = 0x00000002
	DerivationMethodHMAC                 DerivationMethod = 0x00000003
	DerivationMethodENCRYPT              DerivationMethod = 0x00000004
	DerivationMethodNIST800_108_C        DerivationMethod = 0x00000005
	DerivationMethodNIST800_108_F        DerivationMethod = 0x00000006
	DerivationMethodNIST800_108_DPI      DerivationMethod = 0x00000007
	DerivationMethodAsymmetricKey        DerivationMethod = 0x00000008
	DerivationMethodAWSSignatureVersion4 DerivationMethod = 0x00000009
	DerivationMethodHKDF                 DerivationMethod = 0x0000000a
)

var DerivationMethodEnum = NewDerivationMethodEnum()

func NewDerivationMethodEnum() ttlv.Enum {
	m := map[DerivationMethod]string{
		DerivationMethodPBKDF2:               "PBKDF2",
		DerivationMethodHASH:                 "HASH",
		DerivationMethodHMAC:                 "HMAC",
		DerivationMethodENCRYPT:              "ENCRYPT",
		DerivationMethodNIST800_108_C:        "NIST800 - 108 - C",
		DerivationMethodNIST800_108_F:        "NIST800 - 108 - F",
		DerivationMethodNIST800_108_DPI:      "NIST800 - 108 - DPI",
		DerivationMethodAsymmetricKey:        "Asymmetric Key",
		DerivationMethodAWSSignatureVersion4: "AWS Signature Version 4",
		DerivationMethodHKDF:                 "HKDF",
	}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (d DerivationMethod) MarshalText() (text []byte, err error) {
	return []byte(d.String()), nil
}

func (d DerivationMethod) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(d))
	return nil
}

func (d DerivationMethod) String() string {
	return ttlv.FormatEnum(uint32(d), &DerivationMethodEnum)
}

// Link Type Enumeration
// 9.1.3.2.20 Table 308
type LinkType uint32

const (
	LinkTypeCertificateLink          LinkType = 0x00000101
	LinkTypePublicKeyLink            LinkType = 0x00000102
	LinkTypePrivateKeyLink           LinkType = 0x00000103
	LinkTypeDerivationBaseObjectLink LinkType = 0x00000104
	LinkTypeDerivedKeyLink           LinkType = 0x00000105
	LinkTypeReplacementObjectLink    LinkType = 0x00000106
	LinkTypeReplacedObjectLink       LinkType = 0x00000107
	LinkTypeParentLink               LinkType = 0x00000108
	LinkTypeChildLink                LinkType = 0x00000109
	LinkTypePreviousLink             LinkType = 0x0000010a
	LinkTypeNextLink                 LinkType = 0x0000010b
	LinkTypePKCS_12CertificateLink   LinkType = 0x0000010c
	LinkTypePKCS_12PasswordLink      LinkType = 0x0000010d
	LinkTypeWrappingKeyLink          LinkType = 0x0000010e
)

var LinkTypeEnum = NewLinkTypeEnum()

func NewLinkTypeEnum() ttlv.Enum {
	m := map[LinkType]string{
		LinkTypeCertificateLink:          "Certificate Link",
		LinkTypePublicKeyLink:            "Public Key Link",
		LinkTypePrivateKeyLink:           "Private Key Link",
		LinkTypeDerivationBaseObjectLink: "Derivation Base Object Link",
		LinkTypeDerivedKeyLink:           "Derived Key Link",
		LinkTypeReplacementObjectLink:    "Replacement Object Link",
		LinkTypeReplacedObjectLink:       "Replaced Object Link",
		LinkTypeParentLink:               "Parent Link",
		LinkTypeChildLink:                "Child Link",
		LinkTypePreviousLink:             "Previous Link",
		LinkTypeNextLink:                 "Next Link",
		LinkTypePKCS_12CertificateLink:   "PKCS#12 Certificate Link",
		LinkTypePKCS_12PasswordLink:      "PKCS#12 Password Link",
		LinkTypeWrappingKeyLink:          "Wrapping Key Link",
	}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (l LinkType) MarshalText() (text []byte, err error) {
	return []byte(l.String()), nil
}

func (l LinkType) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(l))
	return nil
}

func (l LinkType) String() string {
	return ttlv.FormatEnum(uint32(l), &LinkTypeEnum)
}

// Object Type Enumeration
// 9.1.3.2.12 Table 300
type ObjectType uint32

const (
	ObjectTypeCertificate        ObjectType = 0x00000001
	ObjectTypeSymmetricKey       ObjectType = 0x00000002
	ObjectTypePublicKey          ObjectType = 0x00000003
	ObjectTypePrivateKey         ObjectType = 0x00000004
	ObjectTypeSplitKey           ObjectType = 0x00000005
	ObjectTypeTemplate           ObjectType = 0x00000006
	ObjectTypeSecretData         ObjectType = 0x00000007
	ObjectTypeOpaqueObject       ObjectType = 0x00000008
	ObjectTypePGPKey             ObjectType = 0x00000009
	ObjectTypeCertificateRequest ObjectType = 0x0000000a
)

var ObjectTypeEnum = NewObjectTypeEnum()

func NewObjectTypeEnum() ttlv.Enum {
	m := map[ObjectType]string{
		ObjectTypeCertificate:        "Certificate",
		ObjectTypeSymmetricKey:       "Symmetric Key",
		ObjectTypePublicKey:          "Public Key",
		ObjectTypePrivateKey:         "Private Key",
		ObjectTypeSplitKey:           "Split Key",
		ObjectTypeTemplate:           "Template",
		ObjectTypeSecretData:         "Secret Data",
		ObjectTypeOpaqueObject:       "Opaque Object",
		ObjectTypePGPKey:             "PGP Key",
		ObjectTypeCertificateRequest: "Certificate Request",
	}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (o ObjectType) MarshalText() (text []byte, err error) {
	return []byte(o.String()), nil
}

func (o ObjectType) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(o))
	return nil
}

func (o ObjectType) String() string {
	return ttlv.FormatEnum(uint32(o), &ObjectTypeEnum)
}

// Operation Enumeration
// 9.1.3.2.27 Table 315
type Operation uint32

const (
	OperationCreate             Operation = 0x00000001
	OperationCreateKeyPair      Operation = 0x00000002
	OperationRegister           Operation = 0x00000003
	OperationReKey              Operation = 0x00000004
	OperationDeriveKey          Operation = 0x00000005
	OperationCertify            Operation = 0x00000006
	OperationReCertify          Operation = 0x00000007
	OperationLocate             Operation = 0x00000008
	OperationCheck              Operation = 0x00000009
	OperationGet                Operation = 0x0000000a
	OperationGetAttributes      Operation = 0x0000000b
	OperationGetAttributeList   Operation = 0x0000000c
	OperationAddAttribute       Operation = 0x0000000d
	OperationModifyAttribute    Operation = 0x0000000e
	OperationDeleteAttribute    Operation = 0x0000000f
	OperationObtainLease        Operation = 0x00000010
	OperationGetUsageAllocation Operation = 0x00000011
	OperationActivate           Operation = 0x00000012
	OperationRevoke             Operation = 0x00000013
	OperationDestroy            Operation = 0x00000014
	OperationArchive            Operation = 0x00000015
	OperationRecover            Operation = 0x00000016
	OperationValidate           Operation = 0x00000017
	OperationQuery              Operation = 0x00000018
	OperationCancel             Operation = 0x00000019
	OperationPoll               Operation = 0x0000001a
	OperationNotify             Operation = 0x0000001b
	OperationPut                Operation = 0x0000001c
	OperationReKeyKeyPair       Operation = 0x0000001d
	OperationDiscoverVersions   Operation = 0x0000001e
	OperationEncrypt            Operation = 0x0000001f
	OperationDecrypt            Operation = 0x00000020
	OperationSign               Operation = 0x00000021
	OperationSignatureVerify    Operation = 0x00000022
	OperationMAC                Operation = 0x00000023
	OperationMACVerify          Operation = 0x00000024
	OperationRNGRetrieve        Operation = 0x00000025
	OperationRNGSeed            Operation = 0x00000026
	OperationHash               Operation = 0x00000027
	OperationCreateSplitKey     Operation = 0x00000028
	OperationJoinSplitKey       Operation = 0x00000029
	OperationImport             Operation = 0x0000002a
	OperationExport             Operation = 0x0000002b
	OperationLog                Operation = 0x0000002c
	OperationLogin              Operation = 0x0000002d
	OperationLogout             Operation = 0x0000002e
	OperationDelegatedLogin     Operation = 0x0000002f
	OperationAdjustAttribute    Operation = 0x00000030
	OperationSetAttribute       Operation = 0x00000031
	OperationSetEndpointRole    Operation = 0x00000032
	OperationPKCS_11            Operation = 0x00000033
	OperationInterop            Operation = 0x00000034
	OperationReProvision        Operation = 0x00000035
)

var OperationEnum = NewOperationEnum()

func NewOperationEnum() ttlv.Enum {
	m := map[Operation]string{
		OperationCreate:             "Create",
		OperationCreateKeyPair:      "Create Key Pair",
		OperationRegister:           "Register",
		OperationReKey:              "Re-key",
		OperationDeriveKey:          "Derive Key",
		OperationCertify:            "Certify",
		OperationReCertify:          "Re-certify",
		OperationLocate:             "Locate",
		OperationCheck:              "Check",
		OperationGet:                "Get",
		OperationGetAttributes:      "Get Attributes",
		OperationGetAttributeList:   "Get Attribute List",
		OperationAddAttribute:       "Add Attribute",
		OperationModifyAttribute:    "Modify Attribute",
		OperationDeleteAttribute:    "Delete Attribute",
		OperationObtainLease:        "Obtain Lease",
		OperationGetUsageAllocation: "Get Usage Allocation",
		OperationActivate:           "Activate",
		OperationRevoke:             "Revoke",
		OperationDestroy:            "Destroy",
		OperationArchive:            "Archive",
		OperationRecover:            "Recover",
		OperationValidate:           "Validate",
		OperationQuery:              "Query",
		OperationCancel:             "Cancel",
		OperationPoll:               "Poll",
		OperationNotify:             "Notify",
		OperationPut:                "Put",
		OperationReKeyKeyPair:       "Re-key Key Pair",
		OperationDiscoverVersions:   "Discover Versions",
		OperationEncrypt:            "Encrypt",
		OperationDecrypt:            "Decrypt",
		OperationSign:               "Sign",
		OperationSignatureVerify:    "Signature Verify",
		OperationMAC:                "MAC",
		OperationMACVerify:          "MAC Verify",
		OperationRNGRetrieve:        "RNG Retrieve",
		OperationRNGSeed:            "RNG Seed",
		OperationHash:               "Hash",
		OperationCreateSplitKey:     "Create Split Key",
		OperationJoinSplitKey:       "Join Split Key",
		OperationImport:             "Import",
		OperationExport:             "Export",
		OperationLog:                "Log",
		OperationLogin:              "Login",
		OperationLogout:             "Logout",
		OperationDelegatedLogin:     "Delegated Login",
		OperationAdjustAttribute:    "Adjust Attribute",
		OperationSetAttribute:       "Set Attribute",
		OperationSetEndpointRole:    "Set Endpoint Role",
		OperationPKCS_11:            "PKCS#11",
		OperationInterop:            "Interop",
		OperationReProvision:        "Re-Provision",
	}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (o Operation) MarshalText() (text []byte, err error) {
	return []byte(o.String()), nil
}

func (o Operation) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(o))
	return nil
}

func (o Operation) String() string {
	return ttlv.FormatEnum(uint32(o), &OperationEnum)
}

// Profile Name Enumeration
// 9.1.3.2.42
type ProfileName uint32

const (
	ProfileNameBaselineServerBasicKMIPV1_2                       ProfileName = 0x00000001
	ProfileNameBaselineServerTLSV1_2KMIPV1_2                     ProfileName = 0x00000002
	ProfileNameBaselineClientBasicKMIPV1_2                       ProfileName = 0x00000003
	ProfileNameBaselineClientTLSV1_2KMIPV1_2                     ProfileName = 0x00000004
	ProfileNameCompleteServerBasicKMIPV1_2                       ProfileName = 0x00000005
	ProfileNameCompleteServerTLSV1_2KMIPV1_2                     ProfileName = 0x00000006
	ProfileNameTapeLibraryClientKMIPV1_0                         ProfileName = 0x00000007
	ProfileNameTapeLibraryClientKMIPV1_1                         ProfileName = 0x00000008
	ProfileNameTapeLibraryClientKMIPV1_2                         ProfileName = 0x00000009
	ProfileNameTapeLibraryServerKMIPV1_0                         ProfileName = 0x0000000a
	ProfileNameTapeLibraryServerKMIPV1_1                         ProfileName = 0x0000000b
	ProfileNameTapeLibraryServerKMIPV1_2                         ProfileName = 0x0000000c
	ProfileNameSymmetricKeyLifecycleClientKMIPV1_0               ProfileName = 0x0000000d
	ProfileNameSymmetricKeyLifecycleClientKMIPV1_1               ProfileName = 0x0000000e
	ProfileNameSymmetricKeyLifecycleClientKMIPV1_2               ProfileName = 0x0000000f
	ProfileNameSymmetricKeyLifecycleServerKMIPV1_0               ProfileName = 0x00000010
	ProfileNameSymmetricKeyLifecycleServerKMIPV1_1               ProfileName = 0x00000011
	ProfileNameSymmetricKeyLifecycleServerKMIPV1_2               ProfileName = 0x00000012
	ProfileNameAsymmetricKeyLifecycleClientKMIPV1_0              ProfileName = 0x00000013
	ProfileNameAsymmetricKeyLifecycleClientKMIPV1_1              ProfileName = 0x00000014
	ProfileNameAsymmetricKeyLifecycleClientKMIPV1_2              ProfileName = 0x00000015
	ProfileNameAsymmetricKeyLifecycleServerKMIPV1_0              ProfileName = 0x00000016
	ProfileNameAsymmetricKeyLifecycleServerKMIPV1_1              ProfileName = 0x00000017
	ProfileNameAsymmetricKeyLifecycleServerKMIPV1_2              ProfileName = 0x00000018
	ProfileNameBasicCryptographicClientKMIPV1_2                  ProfileName = 0x00000019
	ProfileNameBasicCryptographicServerKMIPV1_2                  ProfileName = 0x0000001a
	ProfileNameAdvancedCryptographicClientKMIPV1_2               ProfileName = 0x0000001b
	ProfileNameAdvancedCryptographicServerKMIPV1_2               ProfileName = 0x0000001c
	ProfileNameRNGCryptographicClientKMIPV1_2                    ProfileName = 0x0000001d
	ProfileNameRNGCryptographicServerKMIPV1_2                    ProfileName = 0x0000001e
	ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_0            ProfileName = 0x0000001f
	ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_0     ProfileName = 0x00000020
	ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_0         ProfileName = 0x00000021
	ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_1            ProfileName = 0x00000022
	ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_1     ProfileName = 0x00000023
	ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_1         ProfileName = 0x00000024
	ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_2            ProfileName = 0x00000025
	ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_2     ProfileName = 0x00000026
	ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_2         ProfileName = 0x00000027
	ProfileNameSymmetricKeyFoundryServerKMIPV1_0                 ProfileName = 0x00000028
	ProfileNameSymmetricKeyFoundryServerKMIPV1_1                 ProfileName = 0x00000029
	ProfileNameSymmetricKeyFoundryServerKMIPV1_2                 ProfileName = 0x0000002a
	ProfileNameOpaqueManagedObjectStoreClientKMIPV1_0            ProfileName = 0x0000002b
	ProfileNameOpaqueManagedObjectStoreClientKMIPV1_1            ProfileName = 0x0000002c
	ProfileNameOpaqueManagedObjectStoreClientKMIPV1_2            ProfileName = 0x0000002d
	ProfileNameOpaqueManagedObjectStoreServerKMIPV1_0            ProfileName = 0x0000002e
	ProfileNameOpaqueManagedObjectStoreServerKMIPV1_1            ProfileName = 0x0000002f
	ProfileNameOpaqueManagedObjectStoreServerKMIPV1_2            ProfileName = 0x00000030
	ProfileNameSuiteBMinLOS_128ClientKMIPV1_0                    ProfileName = 0x00000031
	ProfileNameSuiteBMinLOS_128ClientKMIPV1_1                    ProfileName = 0x00000032
	ProfileNameSuiteBMinLOS_128ClientKMIPV1_2                    ProfileName = 0x00000033
	ProfileNameSuiteBMinLOS_128ServerKMIPV1_0                    ProfileName = 0x00000034
	ProfileNameSuiteBMinLOS_128ServerKMIPV1_1                    ProfileName = 0x00000035
	ProfileNameSuiteBMinLOS_128ServerKMIPV1_2                    ProfileName = 0x00000036
	ProfileNameSuiteBMinLOS_192ClientKMIPV1_0                    ProfileName = 0x00000037
	ProfileNameSuiteBMinLOS_192ClientKMIPV1_1                    ProfileName = 0x00000038
	ProfileNameSuiteBMinLOS_192ClientKMIPV1_2                    ProfileName = 0x00000039
	ProfileNameSuiteBMinLOS_192ServerKMIPV1_0                    ProfileName = 0x0000003a
	ProfileNameSuiteBMinLOS_192ServerKMIPV1_1                    ProfileName = 0x0000003b
	ProfileNameSuiteBMinLOS_192ServerKMIPV1_2                    ProfileName = 0x0000003c
	ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_0 ProfileName = 0x0000003d
	ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_1 ProfileName = 0x0000003e
	ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_2 ProfileName = 0x0000003f
	ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_0 ProfileName = 0x00000040
	ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_1 ProfileName = 0x00000041
	ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_2 ProfileName = 0x00000042
	ProfileNameHTTPSClientKMIPV1_0                               ProfileName = 0x00000043
	ProfileNameHTTPSClientKMIPV1_1                               ProfileName = 0x00000044
	ProfileNameHTTPSClientKMIPV1_2                               ProfileName = 0x00000045
	ProfileNameHTTPSServerKMIPV1_0                               ProfileName = 0x00000046
	ProfileNameHTTPSServerKMIPV1_1                               ProfileName = 0x00000047
	ProfileNameHTTPSServerKMIPV1_2                               ProfileName = 0x00000048
	ProfileNameJSONClientKMIPV1_0                                ProfileName = 0x00000049
	ProfileNameJSONClientKMIPV1_1                                ProfileName = 0x0000004a
	ProfileNameJSONClientKMIPV1_2                                ProfileName = 0x0000004b
	ProfileNameJSONServerKMIPV1_0                                ProfileName = 0x0000004c
	ProfileNameJSONServerKMIPV1_1                                ProfileName = 0x0000004d
	ProfileNameJSONServerKMIPV1_2                                ProfileName = 0x0000004e
	ProfileNameXMLClientKMIPV1_0                                 ProfileName = 0x0000004f
	ProfileNameXMLClientKMIPV1_1                                 ProfileName = 0x00000050
	ProfileNameXMLClientKMIPV1_2                                 ProfileName = 0x00000051
	ProfileNameXMLServerKMIPV1_0                                 ProfileName = 0x00000052
	ProfileNameXMLServerKMIPV1_1                                 ProfileName = 0x00000053
	ProfileNameXMLServerKMIPV1_2                                 ProfileName = 0x00000054
	ProfileNameBaselineServerBasicKMIPV1_3                       ProfileName = 0x00000055
	ProfileNameBaselineServerTLSV1_2KMIPV1_3                     ProfileName = 0x00000056
	ProfileNameBaselineClientBasicKMIPV1_3                       ProfileName = 0x00000057
	ProfileNameBaselineClientTLSV1_2KMIPV1_3                     ProfileName = 0x00000058
	ProfileNameCompleteServerBasicKMIPV1_3                       ProfileName = 0x00000059
	ProfileNameCompleteServerTLSV1_2KMIPV1_3                     ProfileName = 0x0000005a
	ProfileNameTapeLibraryClientKMIPV1_3                         ProfileName = 0x0000005b
	ProfileNameTapeLibraryServerKMIPV1_3                         ProfileName = 0x0000005c
	ProfileNameSymmetricKeyLifecycleClientKMIPV1_3               ProfileName = 0x0000005d
	ProfileNameSymmetricKeyLifecycleServerKMIPV1_3               ProfileName = 0x0000005e
	ProfileNameAsymmetricKeyLifecycleClientKMIPV1_3              ProfileName = 0x0000005f
	ProfileNameAsymmetricKeyLifecycleServerKMIPV1_3              ProfileName = 0x00000060
	ProfileNameBasicCryptographicClientKMIPV1_3                  ProfileName = 0x00000061
	ProfileNameBasicCryptographicServerKMIPV1_3                  ProfileName = 0x00000062
	ProfileNameAdvancedCryptographicClientKMIPV1_3               ProfileName = 0x00000063
	ProfileNameAdvancedCryptographicServerKMIPV1_3               ProfileName = 0x00000064
	ProfileNameRNGCryptographicClientKMIPV1_3                    ProfileName = 0x00000065
	ProfileNameRNGCryptographicServerKMIPV1_3                    ProfileName = 0x00000066
	ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_3            ProfileName = 0x00000067
	ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_3     ProfileName = 0x00000068
	ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_3         ProfileName = 0x00000069
	ProfileNameSymmetricKeyFoundryServerKMIPV1_3                 ProfileName = 0x0000006a
	ProfileNameOpaqueManagedObjectStoreClientKMIPV1_3            ProfileName = 0x0000006b
	ProfileNameOpaqueManagedObjectStoreServerKMIPV1_3            ProfileName = 0x0000006c
	ProfileNameSuiteBMinLOS_128ClientKMIPV1_3                    ProfileName = 0x0000006d
	ProfileNameSuiteBMinLOS_128ServerKMIPV1_3                    ProfileName = 0x0000006e
	ProfileNameSuiteBMinLOS_192ClientKMIPV1_3                    ProfileName = 0x0000006f
	ProfileNameSuiteBMinLOS_192ServerKMIPV1_3                    ProfileName = 0x00000070
	ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_3 ProfileName = 0x00000071
	ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_3 ProfileName = 0x00000072
	ProfileNameHTTPSClientKMIPV1_3                               ProfileName = 0x00000073
	ProfileNameHTTPSServerKMIPV1_3                               ProfileName = 0x00000074
	ProfileNameJSONClientKMIPV1_3                                ProfileName = 0x00000075
	ProfileNameJSONServerKMIPV1_3                                ProfileName = 0x00000076
	ProfileNameXMLClientKMIPV1_3                                 ProfileName = 0x00000077
	ProfileNameXMLServerKMIPV1_3                                 ProfileName = 0x00000078
	ProfileNameBaselineServerBasicKMIPV1_4                       ProfileName = 0x00000079
	ProfileNameBaselineServerTLSV1_2KMIPV1_4                     ProfileName = 0x0000007a
	ProfileNameBaselineClientBasicKMIPV1_4                       ProfileName = 0x0000007b
	ProfileNameBaselineClientTLSV1_2KMIPV1_4                     ProfileName = 0x0000007c
	ProfileNameCompleteServerBasicKMIPV1_4                       ProfileName = 0x0000007d
	ProfileNameCompleteServerTLSV1_2KMIPV1_4                     ProfileName = 0x0000007e
	ProfileNameTapeLibraryClientKMIPV1_4                         ProfileName = 0x0000007f
	ProfileNameTapeLibraryServerKMIPV1_4                         ProfileName = 0x00000080
	ProfileNameSymmetricKeyLifecycleClientKMIPV1_4               ProfileName = 0x00000081
	ProfileNameSymmetricKeyLifecycleServerKMIPV1_4               ProfileName = 0x00000082
	ProfileNameAsymmetricKeyLifecycleClientKMIPV1_4              ProfileName = 0x00000083
	ProfileNameAsymmetricKeyLifecycleServerKMIPV1_4              ProfileName = 0x00000084
	ProfileNameBasicCryptographicClientKMIPV1_4                  ProfileName = 0x00000085
	ProfileNameBasicCryptographicServerKMIPV1_4                  ProfileName = 0x00000086
	ProfileNameAdvancedCryptographicClientKMIPV1_4               ProfileName = 0x00000087
	ProfileNameAdvancedCryptographicServerKMIPV1_4               ProfileName = 0x00000088
	ProfileNameRNGCryptographicClientKMIPV1_4                    ProfileName = 0x00000089
	ProfileNameRNGCryptographicServerKMIPV1_4                    ProfileName = 0x0000008a
	ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_4            ProfileName = 0x0000008b
	ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_4     ProfileName = 0x0000008c
	ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_4         ProfileName = 0x0000008d
	ProfileNameSymmetricKeyFoundryServerKMIPV1_4                 ProfileName = 0x0000008e
	ProfileNameOpaqueManagedObjectStoreClientKMIPV1_4            ProfileName = 0x0000008f
	ProfileNameOpaqueManagedObjectStoreServerKMIPV1_4            ProfileName = 0x00000090
	ProfileNameSuiteBMinLOS_128ClientKMIPV1_4                    ProfileName = 0x00000091
	ProfileNameSuiteBMinLOS_128ServerKMIPV1_4                    ProfileName = 0x00000092
	ProfileNameSuiteBMinLOS_192ClientKMIPV1_4                    ProfileName = 0x00000093
	ProfileNameSuiteBMinLOS_192ServerKMIPV1_4                    ProfileName = 0x00000094
	ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_4 ProfileName = 0x00000095
	ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_4 ProfileName = 0x00000096
	ProfileNameHTTPSClientKMIPV1_4                               ProfileName = 0x00000097
	ProfileNameHTTPSServerKMIPV1_4                               ProfileName = 0x00000098
	ProfileNameJSONClientKMIPV1_4                                ProfileName = 0x00000099
	ProfileNameJSONServerKMIPV1_4                                ProfileName = 0x0000009a
	ProfileNameXMLClientKMIPV1_4                                 ProfileName = 0x0000009b
	ProfileNameXMLServerKMIPV1_4                                 ProfileName = 0x0000009c
	ProfileNameCompleteServerBasic                               ProfileName = 0x00000104
	ProfileNameCompleteServerTLSV1_2                             ProfileName = 0x00000105
	ProfileNameTapeLibraryClient                                 ProfileName = 0x00000106
	ProfileNameTapeLibraryServer                                 ProfileName = 0x00000107
	ProfileNameSymmetricKeyLifecycleClient                       ProfileName = 0x00000108
	ProfileNameSymmetricKeyLifecycleServer                       ProfileName = 0x00000109
	ProfileNameAsymmetricKeyLifecycleClient                      ProfileName = 0x0000010a
	ProfileNameAsymmetricKeyLifecycleServer                      ProfileName = 0x0000010b
	ProfileNameBasicCryptographicClient                          ProfileName = 0x0000010c
	ProfileNameBasicCryptographicServer                          ProfileName = 0x0000010d
	ProfileNameAdvancedCryptographicClient                       ProfileName = 0x0000010e
	ProfileNameAdvancedCryptographicServer                       ProfileName = 0x0000010f
	ProfileNameRNGCryptographicClient                            ProfileName = 0x00000110
	ProfileNameRNGCryptographicServer                            ProfileName = 0x00000111
	ProfileNameBasicSymmetricKeyFoundryClient                    ProfileName = 0x00000112
	ProfileNameIntermediateSymmetricKeyFoundryClient             ProfileName = 0x00000113
	ProfileNameAdvancedSymmetricKeyFoundryClient                 ProfileName = 0x00000114
	ProfileNameSymmetricKeyFoundryServer                         ProfileName = 0x00000115
	ProfileNameOpaqueManagedObjectStoreClient                    ProfileName = 0x00000116
	ProfileNameOpaqueManagedObjectStoreServer                    ProfileName = 0x00000117
	ProfileNameSuiteBMinLOS_128Client                            ProfileName = 0x00000118
	ProfileNameSuiteBMinLOS_128Server                            ProfileName = 0x00000119
	ProfileNameSuiteBMinLOS_192Client                            ProfileName = 0x0000011a
	ProfileNameSuiteBMinLOS_192Server                            ProfileName = 0x0000011b
	ProfileNameStorageArrayWithSelfEncryptingDriveClient         ProfileName = 0x0000011c
	ProfileNameStorageArrayWithSelfEncryptingDriveServer         ProfileName = 0x0000011d
	ProfileNameHTTPSClient                                       ProfileName = 0x0000011e
	ProfileNameHTTPSServer                                       ProfileName = 0x0000011f
	ProfileNameJSONClient                                        ProfileName = 0x00000120
	ProfileNameJSONServer                                        ProfileName = 0x00000121
	ProfileNameXMLClient                                         ProfileName = 0x00000122
	ProfileNameXMLServer                                         ProfileName = 0x00000123
	ProfileNameAESXTSClient                                      ProfileName = 0x00000124
	ProfileNameAESXTSServer                                      ProfileName = 0x00000125
	ProfileNameQuantumSafeClient                                 ProfileName = 0x00000126
	ProfileNameQuantumSafeServer                                 ProfileName = 0x00000127
	ProfileNamePKCS_11Client                                     ProfileName = 0x00000128
	ProfileNamePKCS_11Server                                     ProfileName = 0x00000129
	ProfileNameBaselineClient                                    ProfileName = 0x0000012a
	ProfileNameBaselineServer                                    ProfileName = 0x0000012b
	ProfileNameCompleteServer                                    ProfileName = 0x0000012c
)

var ProfileNameEnum = NewProfileNameEnum()

func NewProfileNameEnum() ttlv.Enum {
	m := map[ProfileName]string{
		ProfileNameBaselineServerBasicKMIPV1_2:                       "Baseline Server Basic KMIP v1.2",
		ProfileNameBaselineServerTLSV1_2KMIPV1_2:                     "Baseline Server TLS v1.2 KMIP v1.2",
		ProfileNameBaselineClientBasicKMIPV1_2:                       "Baseline Client Basic KMIP v1.2",
		ProfileNameBaselineClientTLSV1_2KMIPV1_2:                     "Baseline Client TLS v1.2 KMIP v1.2",
		ProfileNameCompleteServerBasicKMIPV1_2:                       "Complete Server Basic KMIP v1.2",
		ProfileNameCompleteServerTLSV1_2KMIPV1_2:                     "Complete Server TLS v1.2 KMIP v1.2",
		ProfileNameTapeLibraryClientKMIPV1_0:                         "Tape Library Client KMIP v1.0",
		ProfileNameTapeLibraryClientKMIPV1_1:                         "Tape Library Client KMIP v1.1",
		ProfileNameTapeLibraryClientKMIPV1_2:                         "Tape Library Client KMIP v1.2",
		ProfileNameTapeLibraryServerKMIPV1_0:                         "Tape Library Server KMIP v1.0",
		ProfileNameTapeLibraryServerKMIPV1_1:                         "Tape Library Server KMIP v1.1",
		ProfileNameTapeLibraryServerKMIPV1_2:                         "Tape Library Server KMIP v1.2",
		ProfileNameSymmetricKeyLifecycleClientKMIPV1_0:               "Symmetric Key Lifecycle Client KMIP v1.0",
		ProfileNameSymmetricKeyLifecycleClientKMIPV1_1:               "Symmetric Key Lifecycle Client KMIP v1.1",
		ProfileNameSymmetricKeyLifecycleClientKMIPV1_2:               "Symmetric Key Lifecycle Client KMIP v1.2",
		ProfileNameSymmetricKeyLifecycleServerKMIPV1_0:               "Symmetric Key Lifecycle Server KMIP v1.0",
		ProfileNameSymmetricKeyLifecycleServerKMIPV1_1:               "Symmetric Key Lifecycle Server KMIP v1.1",
		ProfileNameSymmetricKeyLifecycleServerKMIPV1_2:               "Symmetric Key Lifecycle Server KMIP v1.2",
		ProfileNameAsymmetricKeyLifecycleClientKMIPV1_0:              "Asymmetric Key Lifecycle Client KMIP v1.0",
		ProfileNameAsymmetricKeyLifecycleClientKMIPV1_1:              "Asymmetric Key Lifecycle Client KMIP v1.1",
		ProfileNameAsymmetricKeyLifecycleClientKMIPV1_2:              "Asymmetric Key Lifecycle Client KMIP v1.2",
		ProfileNameAsymmetricKeyLifecycleServerKMIPV1_0:              "Asymmetric Key Lifecycle Server KMIP v1.0",
		ProfileNameAsymmetricKeyLifecycleServerKMIPV1_1:              "Asymmetric Key Lifecycle Server KMIP v1.1",
		ProfileNameAsymmetricKeyLifecycleServerKMIPV1_2:              "Asymmetric Key Lifecycle Server KMIP v1.2",
		ProfileNameBasicCryptographicClientKMIPV1_2:                  "Basic Cryptographic Client KMIP v1.2",
		ProfileNameBasicCryptographicServerKMIPV1_2:                  "Basic Cryptographic Server KMIP v1.2",
		ProfileNameAdvancedCryptographicClientKMIPV1_2:               "Advanced Cryptographic Client KMIP v1.2",
		ProfileNameAdvancedCryptographicServerKMIPV1_2:               "Advanced Cryptographic Server KMIP v1.2",
		ProfileNameRNGCryptographicClientKMIPV1_2:                    "RNG Cryptographic Client KMIP v1.2",
		ProfileNameRNGCryptographicServerKMIPV1_2:                    "RNG Cryptographic Server KMIP v1.2",
		ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_0:            "Basic Symmetric Key Foundry Client KMIP v1.0",
		ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_0:     "Intermediate Symmetric Key Foundry Client KMIP v1.0",
		ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_0:         "Advanced Symmetric Key Foundry Client KMIP v1.0",
		ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_1:            "Basic Symmetric Key Foundry Client KMIP v1.1",
		ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_1:     "Intermediate Symmetric Key Foundry Client KMIP v1.1",
		ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_1:         "Advanced Symmetric Key Foundry Client KMIP v1.1",
		ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_2:            "Basic Symmetric Key Foundry Client KMIP v1.2",
		ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_2:     "Intermediate Symmetric Key Foundry Client KMIP v1.2",
		ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_2:         "Advanced Symmetric Key Foundry Client KMIP v1.2",
		ProfileNameSymmetricKeyFoundryServerKMIPV1_0:                 "Symmetric Key Foundry Server KMIP v1.0",
		ProfileNameSymmetricKeyFoundryServerKMIPV1_1:                 "Symmetric Key Foundry Server KMIP v1.1",
		ProfileNameSymmetricKeyFoundryServerKMIPV1_2:                 "Symmetric Key Foundry Server KMIP v1.2",
		ProfileNameOpaqueManagedObjectStoreClientKMIPV1_0:            "Opaque Managed Object Store Client KMIP v1.0",
		ProfileNameOpaqueManagedObjectStoreClientKMIPV1_1:            "Opaque Managed Object Store Client KMIP v1.1",
		ProfileNameOpaqueManagedObjectStoreClientKMIPV1_2:            "Opaque Managed Object Store Client KMIP v1.2",
		ProfileNameOpaqueManagedObjectStoreServerKMIPV1_0:            "Opaque Managed Object Store Server KMIP v1.0",
		ProfileNameOpaqueManagedObjectStoreServerKMIPV1_1:            "Opaque Managed Object Store Server KMIP v1.1",
		ProfileNameOpaqueManagedObjectStoreServerKMIPV1_2:            "Opaque Managed Object Store Server KMIP v1.2",
		ProfileNameSuiteBMinLOS_128ClientKMIPV1_0:                    "Suite B minLOS_128 Client KMIP v1.0",
		ProfileNameSuiteBMinLOS_128ClientKMIPV1_1:                    "Suite B minLOS_128 Client KMIP v1.1",
		ProfileNameSuiteBMinLOS_128ClientKMIPV1_2:                    "Suite B minLOS_128 Client KMIP v1.2",
		ProfileNameSuiteBMinLOS_128ServerKMIPV1_0:                    "Suite B minLOS_128 Server KMIP v1.0",
		ProfileNameSuiteBMinLOS_128ServerKMIPV1_1:                    "Suite B minLOS_128 Server KMIP v1.1",
		ProfileNameSuiteBMinLOS_128ServerKMIPV1_2:                    "Suite B minLOS_128 Server KMIP v1.2",
		ProfileNameSuiteBMinLOS_192ClientKMIPV1_0:                    "Suite B minLOS_192 Client KMIP v1.0",
		ProfileNameSuiteBMinLOS_192ClientKMIPV1_1:                    "Suite B minLOS_192 Client KMIP v1.1",
		ProfileNameSuiteBMinLOS_192ClientKMIPV1_2:                    "Suite B minLOS_192 Client KMIP v1.2",
		ProfileNameSuiteBMinLOS_192ServerKMIPV1_0:                    "Suite B minLOS_192 Server KMIP v1.0",
		ProfileNameSuiteBMinLOS_192ServerKMIPV1_1:                    "Suite B minLOS_192 Server KMIP v1.1",
		ProfileNameSuiteBMinLOS_192ServerKMIPV1_2:                    "Suite B minLOS_192 Server KMIP v1.2",
		ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_0: "Storage Array with Self Encrypting Drive Client KMIP v1.0",
		ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_1: "Storage Array with Self Encrypting Drive Client KMIP v1.1",
		ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_2: "Storage Array with Self Encrypting Drive Client KMIP v1.2",
		ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_0: "Storage Array with Self Encrypting Drive Server KMIP v1.0",
		ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_1: "Storage Array with Self Encrypting Drive Server KMIP v1.1",
		ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_2: "Storage Array with Self Encrypting Drive Server KMIP v1.2",
		ProfileNameHTTPSClientKMIPV1_0:                               "HTTPS Client KMIP v1.0",
		ProfileNameHTTPSClientKMIPV1_1:                               "HTTPS Client KMIP v1.1",
		ProfileNameHTTPSClientKMIPV1_2:                               "HTTPS Client KMIP v1.2",
		ProfileNameHTTPSServerKMIPV1_0:                               "HTTPS Server KMIP v1.0",
		ProfileNameHTTPSServerKMIPV1_1:                               "HTTPS Server KMIP v1.1",
		ProfileNameHTTPSServerKMIPV1_2:                               "HTTPS Server KMIP v1.2",
		ProfileNameJSONClientKMIPV1_0:                                "JSON Client KMIP v1.0",
		ProfileNameJSONClientKMIPV1_1:                                "JSON Client KMIP v1.1",
		ProfileNameJSONClientKMIPV1_2:                                "JSON Client KMIP v1.2",
		ProfileNameJSONServerKMIPV1_0:                                "JSON Server KMIP v1.0",
		ProfileNameJSONServerKMIPV1_1:                                "JSON Server KMIP v1.1",
		ProfileNameJSONServerKMIPV1_2:                                "JSON Server KMIP v1.2",
		ProfileNameXMLClientKMIPV1_0:                                 "XML Client KMIP v1.0",
		ProfileNameXMLClientKMIPV1_1:                                 "XML Client KMIP v1.1",
		ProfileNameXMLClientKMIPV1_2:                                 "XML Client KMIP v1.2",
		ProfileNameXMLServerKMIPV1_0:                                 "XML Server KMIP v1.0",
		ProfileNameXMLServerKMIPV1_1:                                 "XML Server KMIP v1.1",
		ProfileNameXMLServerKMIPV1_2:                                 "XML Server KMIP v1.2",
		ProfileNameBaselineServerBasicKMIPV1_3:                       "Baseline Server Basic KMIP v1.3",
		ProfileNameBaselineServerTLSV1_2KMIPV1_3:                     "Baseline Server TLS v1.2 KMIP v1.3",
		ProfileNameBaselineClientBasicKMIPV1_3:                       "Baseline Client Basic KMIP v1.3",
		ProfileNameBaselineClientTLSV1_2KMIPV1_3:                     "Baseline Client TLS v1.2 KMIP v1.3",
		ProfileNameCompleteServerBasicKMIPV1_3:                       "Complete Server Basic KMIP v1.3",
		ProfileNameCompleteServerTLSV1_2KMIPV1_3:                     "Complete Server TLS v1.2 KMIP v1.3",
		ProfileNameTapeLibraryClientKMIPV1_3:                         "Tape Library Client KMIP v1.3",
		ProfileNameTapeLibraryServerKMIPV1_3:                         "Tape Library Server KMIP v1.3",
		ProfileNameSymmetricKeyLifecycleClientKMIPV1_3:               "Symmetric Key Lifecycle Client KMIP v1.3",
		ProfileNameSymmetricKeyLifecycleServerKMIPV1_3:               "Symmetric Key Lifecycle Server KMIP v1.3",
		ProfileNameAsymmetricKeyLifecycleClientKMIPV1_3:              "Asymmetric Key Lifecycle Client KMIP v1.3",
		ProfileNameAsymmetricKeyLifecycleServerKMIPV1_3:              "Asymmetric Key Lifecycle Server KMIP v1.3",
		ProfileNameBasicCryptographicClientKMIPV1_3:                  "Basic Cryptographic Client KMIP v1.3",
		ProfileNameBasicCryptographicServerKMIPV1_3:                  "Basic Cryptographic Server KMIP v1.3",
		ProfileNameAdvancedCryptographicClientKMIPV1_3:               "Advanced Cryptographic Client KMIP v1.3",
		ProfileNameAdvancedCryptographicServerKMIPV1_3:               "Advanced Cryptographic Server KMIP v1.3",
		ProfileNameRNGCryptographicClientKMIPV1_3:                    "RNG Cryptographic Client KMIP v1.3",
		ProfileNameRNGCryptographicServerKMIPV1_3:                    "RNG Cryptographic Server KMIP v1.3",
		ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_3:            "Basic Symmetric Key Foundry Client KMIP v1.3",
		ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_3:     "Intermediate Symmetric Key Foundry Client KMIP v1.3",
		ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_3:         "Advanced Symmetric Key Foundry Client KMIP v1.3",
		ProfileNameSymmetricKeyFoundryServerKMIPV1_3:                 "Symmetric Key Foundry Server KMIP v1.3",
		ProfileNameOpaqueManagedObjectStoreClientKMIPV1_3:            "Opaque Managed Object Store Client KMIP v1.3",
		ProfileNameOpaqueManagedObjectStoreServerKMIPV1_3:            "Opaque Managed Object Store Server KMIP v1.3",
		ProfileNameSuiteBMinLOS_128ClientKMIPV1_3:                    "Suite B minLOS_128 Client KMIP v1.3",
		ProfileNameSuiteBMinLOS_128ServerKMIPV1_3:                    "Suite B minLOS_128 Server KMIP v1.3",
		ProfileNameSuiteBMinLOS_192ClientKMIPV1_3:                    "Suite B minLOS_192 Client KMIP v1.3",
		ProfileNameSuiteBMinLOS_192ServerKMIPV1_3:                    "Suite B minLOS_192 Server KMIP v1.3",
		ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_3: "Storage Array with Self Encrypting Drive Client KMIP v1.3",
		ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_3: "Storage Array with Self Encrypting Drive Server KMIP v1.3",
		ProfileNameHTTPSClientKMIPV1_3:                               "HTTPS Client KMIP v1.3",
		ProfileNameHTTPSServerKMIPV1_3:                               "HTTPS Server KMIP v1.3",
		ProfileNameJSONClientKMIPV1_3:                                "JSON Client KMIP v1.3",
		ProfileNameJSONServerKMIPV1_3:                                "JSON Server KMIP v1.3",
		ProfileNameXMLClientKMIPV1_3:                                 "XML Client KMIP v1.3",
		ProfileNameXMLServerKMIPV1_3:                                 "XML Server KMIP v1.3",
		ProfileNameBaselineServerBasicKMIPV1_4:                       "Baseline Server Basic KMIP v1.4",
		ProfileNameBaselineServerTLSV1_2KMIPV1_4:                     "Baseline Server TLS v1.2 KMIP v1.4",
		ProfileNameBaselineClientBasicKMIPV1_4:                       "Baseline Client Basic KMIP v1.4",
		ProfileNameBaselineClientTLSV1_2KMIPV1_4:                     "Baseline Client TLS v1.2 KMIP v1.4",
		ProfileNameCompleteServerBasicKMIPV1_4:                       "Complete Server Basic KMIP v1.4",
		ProfileNameCompleteServerTLSV1_2KMIPV1_4:                     "Complete Server TLS v1.2 KMIP v1.4",
		ProfileNameTapeLibraryClientKMIPV1_4:                         "Tape Library Client KMIP v1.4",
		ProfileNameTapeLibraryServerKMIPV1_4:                         "Tape Library Server KMIP v1.4",
		ProfileNameSymmetricKeyLifecycleClientKMIPV1_4:               "Symmetric Key Lifecycle Client KMIP v1.4",
		ProfileNameSymmetricKeyLifecycleServerKMIPV1_4:               "Symmetric Key Lifecycle Server KMIP v1.4",
		ProfileNameAsymmetricKeyLifecycleClientKMIPV1_4:              "Asymmetric Key Lifecycle Client KMIP v1.4",
		ProfileNameAsymmetricKeyLifecycleServerKMIPV1_4:              "Asymmetric Key Lifecycle Server KMIP v1.4",
		ProfileNameBasicCryptographicClientKMIPV1_4:                  "Basic Cryptographic Client KMIP v1.4",
		ProfileNameBasicCryptographicServerKMIPV1_4:                  "Basic Cryptographic Server KMIP v1.4",
		ProfileNameAdvancedCryptographicClientKMIPV1_4:               "Advanced Cryptographic Client KMIP v1.4",
		ProfileNameAdvancedCryptographicServerKMIPV1_4:               "Advanced Cryptographic Server KMIP v1.4",
		ProfileNameRNGCryptographicClientKMIPV1_4:                    "RNG Cryptographic Client KMIP v1.4",
		ProfileNameRNGCryptographicServerKMIPV1_4:                    "RNG Cryptographic Server KMIP v1.4",
		ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_4:            "Basic Symmetric Key Foundry Client KMIP v1.4",
		ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_4:     "Intermediate Symmetric Key Foundry Client KMIP v1.4",
		ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_4:         "Advanced Symmetric Key Foundry Client KMIP v1.4",
		ProfileNameSymmetricKeyFoundryServerKMIPV1_4:                 "Symmetric Key Foundry Server KMIP v1.4",
		ProfileNameOpaqueManagedObjectStoreClientKMIPV1_4:            "Opaque Managed Object Store Client KMIP v1.4",
		ProfileNameOpaqueManagedObjectStoreServerKMIPV1_4:            "Opaque Managed Object Store Server KMIP v1.4",
		ProfileNameSuiteBMinLOS_128ClientKMIPV1_4:                    "Suite B minLOS_128 Client KMIP v1.4",
		ProfileNameSuiteBMinLOS_128ServerKMIPV1_4:                    "Suite B minLOS_128 Server KMIP v1.4",
		ProfileNameSuiteBMinLOS_192ClientKMIPV1_4:                    "Suite B minLOS_192 Client KMIP v1.4",
		ProfileNameSuiteBMinLOS_192ServerKMIPV1_4:                    "Suite B minLOS_192 Server KMIP v1.4",
		ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_4: "Storage Array with Self Encrypting Drive Client KMIP v1.4",
		ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_4: "Storage Array with Self Encrypting Drive Server KMIP v1.4",
		ProfileNameHTTPSClientKMIPV1_4:                               "HTTPS Client KMIP v1.4",
		ProfileNameHTTPSServerKMIPV1_4:                               "HTTPS Server KMIP v1.4",
		ProfileNameJSONClientKMIPV1_4:                                "JSON Client KMIP v1.4",
		ProfileNameJSONServerKMIPV1_4:                                "JSON Server KMIP v1.4",
		ProfileNameXMLClientKMIPV1_4:                                 "XML Client KMIP v1.4",
		ProfileNameXMLServerKMIPV1_4:                                 "XML Server KMIP v1.4",
		ProfileNameCompleteServerBasic:                               "Complete Server Basic",
		ProfileNameCompleteServerTLSV1_2:                             "Complete Server TLS v1.2",
		ProfileNameTapeLibraryClient:                                 "Tape Library Client",
		ProfileNameTapeLibraryServer:                                 "Tape Library Server",
		ProfileNameSymmetricKeyLifecycleClient:                       "Symmetric Key Lifecycle Client",
		ProfileNameSymmetricKeyLifecycleServer:                       "Symmetric Key Lifecycle Server",
		ProfileNameAsymmetricKeyLifecycleClient:                      "Asymmetric Key Lifecycle Client",
		ProfileNameAsymmetricKeyLifecycleServer:                      "Asymmetric Key Lifecycle Server",
		ProfileNameBasicCryptographicClient:                          "Basic Cryptographic Client",
		ProfileNameBasicCryptographicServer:                          "Basic Cryptographic Server",
		ProfileNameAdvancedCryptographicClient:                       "Advanced Cryptographic Client",
		ProfileNameAdvancedCryptographicServer:                       "Advanced Cryptographic Server",
		ProfileNameRNGCryptographicClient:                            "RNG Cryptographic Client ",
		ProfileNameRNGCryptographicServer:                            "RNG Cryptographic Server ",
		ProfileNameBasicSymmetricKeyFoundryClient:                    "Basic Symmetric Key Foundry Client ",
		ProfileNameIntermediateSymmetricKeyFoundryClient:             "Intermediate Symmetric Key Foundry Client ",
		ProfileNameAdvancedSymmetricKeyFoundryClient:                 "Advanced Symmetric Key Foundry Client ",
		ProfileNameSymmetricKeyFoundryServer:                         "Symmetric Key Foundry Server",
		ProfileNameOpaqueManagedObjectStoreClient:                    "Opaque Managed Object Store Client ",
		ProfileNameOpaqueManagedObjectStoreServer:                    "Opaque Managed Object Store Server ",
		ProfileNameSuiteBMinLOS_128Client:                            "Suite B minLOS_128 Client ",
		ProfileNameSuiteBMinLOS_128Server:                            "Suite B minLOS_128 Server ",
		ProfileNameSuiteBMinLOS_192Client:                            "Suite B minLOS_192 Client ",
		ProfileNameSuiteBMinLOS_192Server:                            "Suite B minLOS_192 Server ",
		ProfileNameStorageArrayWithSelfEncryptingDriveClient:         "Storage Array with Self Encrypting Drive Client",
		ProfileNameStorageArrayWithSelfEncryptingDriveServer:         "Storage Array with Self Encrypting Drive Server",
		ProfileNameHTTPSClient:                                       "HTTPS Client ",
		ProfileNameHTTPSServer:                                       "HTTPS Server ",
		ProfileNameJSONClient:                                        "JSON Client ",
		ProfileNameJSONServer:                                        "JSON Server ",
		ProfileNameXMLClient:                                         "XML Client ",
		ProfileNameXMLServer:                                         "XML Server ",
		ProfileNameAESXTSClient:                                      "AES XTS Client",
		ProfileNameAESXTSServer:                                      "AES XTS Server",
		ProfileNameQuantumSafeClient:                                 "Quantum Safe Client",
		ProfileNameQuantumSafeServer:                                 "Quantum Safe Server",
		ProfileNamePKCS_11Client:                                     "PKCS#11 Client",
		ProfileNamePKCS_11Server:                                     "PKCS#11 Server",
		ProfileNameBaselineClient:                                    "Baseline Client",
		ProfileNameBaselineServer:                                    "Baseline Server",
		ProfileNameCompleteServer:                                    "Complete Server",
	}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (p ProfileName) MarshalText() (text []byte, err error) {
	return []byte(p.String()), nil
}

func (p ProfileName) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(p))
	return nil
}

func (p ProfileName) String() string {
	return ttlv.FormatEnum(uint32(p), &ProfileNameEnum)
}

// Query Function Enumeration
// 9.1.3.2.24 Table 312
type QueryFunction uint32

const (
	QueryFunctionQueryOperations                QueryFunction = 0x00000001
	QueryFunctionQueryObjects                   QueryFunction = 0x00000002
	QueryFunctionQueryServerInformation         QueryFunction = 0x00000003
	QueryFunctionQueryApplicationNamespaces     QueryFunction = 0x00000004
	QueryFunctionQueryExtensionList             QueryFunction = 0x00000005
	QueryFunctionQueryExtensionMap              QueryFunction = 0x00000006
	QueryFunctionQueryAttestationTypes          QueryFunction = 0x00000007
	QueryFunctionQueryRNGs                      QueryFunction = 0x00000008
	QueryFunctionQueryValidations               QueryFunction = 0x00000009
	QueryFunctionQueryProfiles                  QueryFunction = 0x0000000a
	QueryFunctionQueryCapabilities              QueryFunction = 0x0000000b
	QueryFunctionQueryClientRegistrationMethods QueryFunction = 0x0000000c
	QueryFunctionQueryDefaultsInformation       QueryFunction = 0x0000000d
	QueryFunctionQueryStorageProtectionMasks    QueryFunction = 0x0000000e
)

var QueryFunctionEnum = NewQueryFunctionEnum()

func NewQueryFunctionEnum() ttlv.Enum {
	m := map[QueryFunction]string{
		QueryFunctionQueryOperations:                "Query Operations",
		QueryFunctionQueryObjects:                   "Query Objects",
		QueryFunctionQueryServerInformation:         "Query Server Information",
		QueryFunctionQueryApplicationNamespaces:     "Query Application Namespaces",
		QueryFunctionQueryExtensionList:             "Query Extension List",
		QueryFunctionQueryExtensionMap:              "Query Extension Map",
		QueryFunctionQueryAttestationTypes:          "Query Attestation Types",
		QueryFunctionQueryRNGs:                      "Query RNGs",
		QueryFunctionQueryValidations:               "Query Validations",
		QueryFunctionQueryProfiles:                  "Query Profiles",
		QueryFunctionQueryCapabilities:              "Query Capabilities",
		QueryFunctionQueryClientRegistrationMethods: "Query Client Registration Methods",
		QueryFunctionQueryDefaultsInformation:       "Query Defaults Information",
		QueryFunctionQueryStorageProtectionMasks:    "Query Storage Protection Masks",
	}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (q QueryFunction) MarshalText() (text []byte, err error) {
	return []byte(q.String()), nil
}

func (q QueryFunction) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(q))
	return nil
}

func (q QueryFunction) String() string {
	return ttlv.FormatEnum(uint32(q), &QueryFunctionEnum)
}

// Recommended Curve Enumeration
// 9.1.3.2.5 Table 293
type RecommendedCurve uint32

const (
	RecommendedCurveP_192            RecommendedCurve = 0x00000001
	RecommendedCurveK_163            RecommendedCurve = 0x00000002
	RecommendedCurveB_163            RecommendedCurve = 0x00000003
	RecommendedCurveP_224            RecommendedCurve = 0x00000004
	RecommendedCurveK_233            RecommendedCurve = 0x00000005
	RecommendedCurveB_233            RecommendedCurve = 0x00000006
	RecommendedCurveP_256            RecommendedCurve = 0x00000007
	RecommendedCurveK_283            RecommendedCurve = 0x00000008
	RecommendedCurveB_283            RecommendedCurve = 0x00000009
	RecommendedCurveP_384            RecommendedCurve = 0x0000000a
	RecommendedCurveK_409            RecommendedCurve = 0x0000000b
	RecommendedCurveB_409            RecommendedCurve = 0x0000000c
	RecommendedCurveP_521            RecommendedCurve = 0x0000000d
	RecommendedCurveK_571            RecommendedCurve = 0x0000000e
	RecommendedCurveB_571            RecommendedCurve = 0x0000000f
	RecommendedCurveSECP112R1        RecommendedCurve = 0x00000010
	RecommendedCurveSECP112R2        RecommendedCurve = 0x00000011
	RecommendedCurveSECP128R1        RecommendedCurve = 0x00000012
	RecommendedCurveSECP128R2        RecommendedCurve = 0x00000013
	RecommendedCurveSECP160K1        RecommendedCurve = 0x00000014
	RecommendedCurveSECP160R1        RecommendedCurve = 0x00000015
	RecommendedCurveSECP160R2        RecommendedCurve = 0x00000016
	RecommendedCurveSECP192K1        RecommendedCurve = 0x00000017
	RecommendedCurveSECP224K1        RecommendedCurve = 0x00000018
	RecommendedCurveSECP256K1        RecommendedCurve = 0x00000019
	RecommendedCurveSECT113R1        RecommendedCurve = 0x0000001a
	RecommendedCurveSECT113R2        RecommendedCurve = 0x0000001b
	RecommendedCurveSECT131R1        RecommendedCurve = 0x0000001c
	RecommendedCurveSECT131R2        RecommendedCurve = 0x0000001d
	RecommendedCurveSECT163R1        RecommendedCurve = 0x0000001e
	RecommendedCurveSECT193R1        RecommendedCurve = 0x0000001f
	RecommendedCurveSECT193R2        RecommendedCurve = 0x00000020
	RecommendedCurveSECT239K1        RecommendedCurve = 0x00000021
	RecommendedCurveANSIX9P192V2     RecommendedCurve = 0x00000022
	RecommendedCurveANSIX9P192V3     RecommendedCurve = 0x00000023
	RecommendedCurveANSIX9P239V1     RecommendedCurve = 0x00000024
	RecommendedCurveANSIX9P239V2     RecommendedCurve = 0x00000025
	RecommendedCurveANSIX9P239V3     RecommendedCurve = 0x00000026
	RecommendedCurveANSIX9C2PNB163V1 RecommendedCurve = 0x00000027
	RecommendedCurveANSIX9C2PNB163V2 RecommendedCurve = 0x00000028
	RecommendedCurveANSIX9C2PNB163V3 RecommendedCurve = 0x00000029
	RecommendedCurveANSIX9C2PNB176V1 RecommendedCurve = 0x0000002a
	RecommendedCurveANSIX9C2TNB191V1 RecommendedCurve = 0x0000002b
	RecommendedCurveANSIX9C2TNB191V2 RecommendedCurve = 0x0000002c
	RecommendedCurveANSIX9C2TNB191V3 RecommendedCurve = 0x0000002d
	RecommendedCurveANSIX9C2PNB208W1 RecommendedCurve = 0x0000002e
	RecommendedCurveANSIX9C2TNB239V1 RecommendedCurve = 0x0000002f
	RecommendedCurveANSIX9C2TNB239V2 RecommendedCurve = 0x00000030
	RecommendedCurveANSIX9C2TNB239V3 RecommendedCurve = 0x00000031
	RecommendedCurveANSIX9C2PNB272W1 RecommendedCurve = 0x00000032
	RecommendedCurveANSIX9C2PNB304W1 RecommendedCurve = 0x00000033
	RecommendedCurveANSIX9C2TNB359V1 RecommendedCurve = 0x00000034
	RecommendedCurveANSIX9C2PNB368W1 RecommendedCurve = 0x00000035
	RecommendedCurveANSIX9C2TNB431R1 RecommendedCurve = 0x00000036
	RecommendedCurveBRAINPOOLP160R1  RecommendedCurve = 0x00000037
	RecommendedCurveBRAINPOOLP160T1  RecommendedCurve = 0x00000038
	RecommendedCurveBRAINPOOLP192R1  RecommendedCurve = 0x00000039
	RecommendedCurveBRAINPOOLP192T1  RecommendedCurve = 0x0000003a
	RecommendedCurveBRAINPOOLP224R1  RecommendedCurve = 0x0000003b
	RecommendedCurveBRAINPOOLP224T1  RecommendedCurve = 0x0000003c
	RecommendedCurveBRAINPOOLP256R1  RecommendedCurve = 0x0000003d
	RecommendedCurveBRAINPOOLP256T1  RecommendedCurve = 0x0000003e
	RecommendedCurveBRAINPOOLP320R1  RecommendedCurve = 0x0000003f
	RecommendedCurveBRAINPOOLP320T1  RecommendedCurve = 0x00000040
	RecommendedCurveBRAINPOOLP384R1  RecommendedCurve = 0x00000041
	RecommendedCurveBRAINPOOLP384T1  RecommendedCurve = 0x00000042
	RecommendedCurveBRAINPOOLP512R1  RecommendedCurve = 0x00000043
	RecommendedCurveBRAINPOOLP512T1  RecommendedCurve = 0x00000044
	RecommendedCurveCURVE25519       RecommendedCurve = 0x00000045
	RecommendedCurveCURVE448         RecommendedCurve = 0x00000046
)

var RecommendedCurveEnum = NewRecommendedCurveEnum()

func NewRecommendedCurveEnum() ttlv.Enum {
	m := map[RecommendedCurve]string{
		RecommendedCurveP_192:            "P-192",
		RecommendedCurveK_163:            "K-163",
		RecommendedCurveB_163:            "B-163",
		RecommendedCurveP_224:            "P-224",
		RecommendedCurveK_233:            "K-233",
		RecommendedCurveB_233:            "B-233",
		RecommendedCurveP_256:            "P-256",
		RecommendedCurveK_283:            "K-283",
		RecommendedCurveB_283:            "B-283",
		RecommendedCurveP_384:            "P-384",
		RecommendedCurveK_409:            "K-409",
		RecommendedCurveB_409:            "B-409",
		RecommendedCurveP_521:            "P-521",
		RecommendedCurveK_571:            "K-571",
		RecommendedCurveB_571:            "B-571",
		RecommendedCurveSECP112R1:        "SECP112R1",
		RecommendedCurveSECP112R2:        "SECP112R2",
		RecommendedCurveSECP128R1:        "SECP128R1",
		RecommendedCurveSECP128R2:        "SECP128R2",
		RecommendedCurveSECP160K1:        "SECP160K1",
		RecommendedCurveSECP160R1:        "SECP160R1",
		RecommendedCurveSECP160R2:        "SECP160R2",
		RecommendedCurveSECP192K1:        "SECP192K1",
		RecommendedCurveSECP224K1:        "SECP224K1",
		RecommendedCurveSECP256K1:        "SECP256K1",
		RecommendedCurveSECT113R1:        "SECT113R1",
		RecommendedCurveSECT113R2:        "SECT113R2",
		RecommendedCurveSECT131R1:        "SECT131R1",
		RecommendedCurveSECT131R2:        "SECT131R2",
		RecommendedCurveSECT163R1:        "SECT163R1",
		RecommendedCurveSECT193R1:        "SECT193R1",
		RecommendedCurveSECT193R2:        "SECT193R2",
		RecommendedCurveSECT239K1:        "SECT239K1",
		RecommendedCurveANSIX9P192V2:     "ANSIX9P192V2",
		RecommendedCurveANSIX9P192V3:     "ANSIX9P192V3",
		RecommendedCurveANSIX9P239V1:     "ANSIX9P239V1",
		RecommendedCurveANSIX9P239V2:     "ANSIX9P239V2",
		RecommendedCurveANSIX9P239V3:     "ANSIX9P239V3",
		RecommendedCurveANSIX9C2PNB163V1: "ANSIX9C2PNB163V1",
		RecommendedCurveANSIX9C2PNB163V2: "ANSIX9C2PNB163V2",
		RecommendedCurveANSIX9C2PNB163V3: "ANSIX9C2PNB163V3",
		RecommendedCurveANSIX9C2PNB176V1: "ANSIX9C2PNB176V1",
		RecommendedCurveANSIX9C2TNB191V1: "ANSIX9C2TNB191V1",
		RecommendedCurveANSIX9C2TNB191V2: "ANSIX9C2TNB191V2",
		RecommendedCurveANSIX9C2TNB191V3: "ANSIX9C2TNB191V3",
		RecommendedCurveANSIX9C2PNB208W1: "ANSIX9C2PNB208W1",
		RecommendedCurveANSIX9C2TNB239V1: "ANSIX9C2TNB239V1",
		RecommendedCurveANSIX9C2TNB239V2: "ANSIX9C2TNB239V2",
		RecommendedCurveANSIX9C2TNB239V3: "ANSIX9C2TNB239V3",
		RecommendedCurveANSIX9C2PNB272W1: "ANSIX9C2PNB272W1",
		RecommendedCurveANSIX9C2PNB304W1: "ANSIX9C2PNB304W1",
		RecommendedCurveANSIX9C2TNB359V1: "ANSIX9C2TNB359V1",
		RecommendedCurveANSIX9C2PNB368W1: "ANSIX9C2PNB368W1",
		RecommendedCurveANSIX9C2TNB431R1: "ANSIX9C2TNB431R1",
		RecommendedCurveBRAINPOOLP160R1:  "BRAINPOOLP160R1",
		RecommendedCurveBRAINPOOLP160T1:  "BRAINPOOLP160T1",
		RecommendedCurveBRAINPOOLP192R1:  "BRAINPOOLP192R1",
		RecommendedCurveBRAINPOOLP192T1:  "BRAINPOOLP192T1",
		RecommendedCurveBRAINPOOLP224R1:  "BRAINPOOLP224R1",
		RecommendedCurveBRAINPOOLP224T1:  "BRAINPOOLP224T1",
		RecommendedCurveBRAINPOOLP256R1:  "BRAINPOOLP256R1",
		RecommendedCurveBRAINPOOLP256T1:  "BRAINPOOLP256T1",
		RecommendedCurveBRAINPOOLP320R1:  "BRAINPOOLP320R1",
		RecommendedCurveBRAINPOOLP320T1:  "BRAINPOOLP320T1",
		RecommendedCurveBRAINPOOLP384R1:  "BRAINPOOLP384R1",
		RecommendedCurveBRAINPOOLP384T1:  "BRAINPOOLP384T1",
		RecommendedCurveBRAINPOOLP512R1:  "BRAINPOOLP512R1",
		RecommendedCurveBRAINPOOLP512T1:  "BRAINPOOLP512T1",
		RecommendedCurveCURVE25519:       "CURVE25519",
		RecommendedCurveCURVE448:         "CURVE448",
	}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (r RecommendedCurve) MarshalText() (text []byte, err error) {
	return []byte(r.String()), nil
}

func (r RecommendedCurve) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(r))
	return nil
}

func (r RecommendedCurve) String() string {
	return ttlv.FormatEnum(uint32(r), &RecommendedCurveEnum)
}

// Result Reason Enumeration
// 9.1.3.2.29 Table 317
type ResultReason uint32

const (
	ResultReasonItemNotFound                        ResultReason = 0x00000001
	ResultReasonResponseTooLarge                    ResultReason = 0x00000002
	ResultReasonAuthenticationNotSuccessful         ResultReason = 0x00000003
	ResultReasonInvalidMessage                      ResultReason = 0x00000004
	ResultReasonOperationNotSupported               ResultReason = 0x00000005
	ResultReasonMissingData                         ResultReason = 0x00000006
	ResultReasonInvalidField                        ResultReason = 0x00000007
	ResultReasonFeatureNotSupported                 ResultReason = 0x00000008
	ResultReasonOperationCanceledByRequester        ResultReason = 0x00000009
	ResultReasonCryptographicFailure                ResultReason = 0x0000000a
	ResultReasonIllegalOperation                    ResultReason = 0x0000000b
	ResultReasonPermissionDenied                    ResultReason = 0x0000000c
	ResultReasonObjectArchived                      ResultReason = 0x0000000d
	ResultReasonIndexOutOfBounds                    ResultReason = 0x0000000e
	ResultReasonApplicationNamespaceNotSupported    ResultReason = 0x0000000f
	ResultReasonKeyFormatTypeNotSupported           ResultReason = 0x00000010
	ResultReasonKeyCompressionTypeNotSupported      ResultReason = 0x00000011
	ResultReasonEncodingOptionError                 ResultReason = 0x00000012
	ResultReasonKeyValueNotPresent                  ResultReason = 0x00000013
	ResultReasonAttestationRequired                 ResultReason = 0x00000014
	ResultReasonAttestationFailed                   ResultReason = 0x00000015
	ResultReasonSensitive                           ResultReason = 0x00000016
	ResultReasonNotExtractable                      ResultReason = 0x00000017
	ResultReasonObjectAlreadyExists                 ResultReason = 0x00000018
	ResultReasonInvalidTicket                       ResultReason = 0x00000019
	ResultReasonUsageLimitExceeded                  ResultReason = 0x0000001a
	ResultReasonNumericRange                        ResultReason = 0x0000001b
	ResultReasonInvalidDataType                     ResultReason = 0x0000001c
	ResultReasonReadOnlyAttribute                   ResultReason = 0x0000001d
	ResultReasonMultiValuedAttribute                ResultReason = 0x0000001e
	ResultReasonUnsupportedAttribute                ResultReason = 0x0000001f
	ResultReasonAttributeInstanceNotFound           ResultReason = 0x00000020
	ResultReasonAttributeNotFound                   ResultReason = 0x00000021
	ResultReasonAttributeReadOnly                   ResultReason = 0x00000022
	ResultReasonAttributeSingleValued               ResultReason = 0x00000023
	ResultReasonBadCryptographicParameters          ResultReason = 0x00000024
	ResultReasonBadPassword                         ResultReason = 0x00000025
	ResultReasonCodecError                          ResultReason = 0x00000026
	ResultReasonIllegalObjectType                   ResultReason = 0x00000028
	ResultReasonIncompatibleCryptographicUsageMask  ResultReason = 0x00000029
	ResultReasonInternalServerError                 ResultReason = 0x0000002a
	ResultReasonInvalidAsynchronousCorrelationValue ResultReason = 0x0000002b
	ResultReasonInvalidAttribute                    ResultReason = 0x0000002c
	ResultReasonInvalidAttributeValue               ResultReason = 0x0000002d
	ResultReasonInvalidCorrelationValue             ResultReason = 0x0000002e
	ResultReasonInvalidCSR                          ResultReason = 0x0000002f
	ResultReasonInvalidObjectType                   ResultReason = 0x00000030
	ResultReasonKeyWrapTypeNotSupported             ResultReason = 0x00000032
	ResultReasonMissingInitializationVector         ResultReason = 0x00000034
	ResultReasonNonUniqueNameAttribute              ResultReason = 0x00000035
	ResultReasonObjectDestroyed                     ResultReason = 0x00000036
	ResultReasonObjectNotFound                      ResultReason = 0x00000037
	ResultReasonNotAuthorized                       ResultReason = 0x00000039
	ResultReasonServerLimitExceeded                 ResultReason = 0x0000003a
	ResultReasonUnknownEnumeration                  ResultReason = 0x0000003b
	ResultReasonUnknownMessageExtension             ResultReason = 0x0000003c
	ResultReasonUnknownTag                          ResultReason = 0x0000003d
	ResultReasonUnsupportedCryptographicParameters  ResultReason = 0x0000003e
	ResultReasonUnsupportedProtocolVersion          ResultReason = 0x0000003f
	ResultReasonWrappingObjectArchived              ResultReason = 0x00000040
	ResultReasonWrappingObjectDestroyed             ResultReason = 0x00000041
	ResultReasonWrappingObjectNotFound              ResultReason = 0x00000042
	ResultReasonWrongKeyLifecycleState              ResultReason = 0x00000043
	ResultReasonProtectionStorageUnavailable        ResultReason = 0x00000044
	ResultReasonPKCS_11CodecError                   ResultReason = 0x00000045
	ResultReasonPKCS_11InvalidFunction              ResultReason = 0x00000046
	ResultReasonPKCS_11InvalidInterface             ResultReason = 0x00000047
	ResultReasonGeneralFailure                      ResultReason = 0x00000100
)

var ResultReasonEnum = NewResultReasonEnum()

func NewResultReasonEnum() ttlv.Enum {
	m := map[ResultReason]string{
		ResultReasonItemNotFound:                        "Item Not Found",
		ResultReasonResponseTooLarge:                    "Response Too Large",
		ResultReasonAuthenticationNotSuccessful:         "Authentication Not Successful",
		ResultReasonInvalidMessage:                      "Invalid Message",
		ResultReasonOperationNotSupported:               "Operation Not Supported",
		ResultReasonMissingData:                         "Missing Data",
		ResultReasonInvalidField:                        "Invalid Field",
		ResultReasonFeatureNotSupported:                 "Feature Not Supported",
		ResultReasonOperationCanceledByRequester:        "Operation Canceled By Requester",
		ResultReasonCryptographicFailure:                "Cryptographic Failure",
		ResultReasonIllegalOperation:                    "Illegal Operation",
		ResultReasonPermissionDenied:                    "Permission Denied",
		ResultReasonObjectArchived:                      "Object archived",
		ResultReasonIndexOutOfBounds:                    "Index Out of Bounds",
		ResultReasonApplicationNamespaceNotSupported:    "Application Namespace Not Supported",
		ResultReasonKeyFormatTypeNotSupported:           "Key Format Type Not Supported",
		ResultReasonKeyCompressionTypeNotSupported:      "Key Compression Type Not Supported",
		ResultReasonEncodingOptionError:                 "Encoding Option Error",
		ResultReasonKeyValueNotPresent:                  "Key Value Not Present",
		ResultReasonAttestationRequired:                 "Attestation Required",
		ResultReasonAttestationFailed:                   "Attestation Failed",
		ResultReasonSensitive:                           "Sensitive",
		ResultReasonNotExtractable:                      "Not Extractable",
		ResultReasonObjectAlreadyExists:                 "Object Already Exists",
		ResultReasonInvalidTicket:                       "Invalid Ticket",
		ResultReasonUsageLimitExceeded:                  "Usage Limit Exceeded",
		ResultReasonNumericRange:                        "Numeric Range",
		ResultReasonInvalidDataType:                     "Invalid Data Type",
		ResultReasonReadOnlyAttribute:                   "Read Only Attribute",
		ResultReasonMultiValuedAttribute:                "Multi Valued Attribute",
		ResultReasonUnsupportedAttribute:                "Unsupported Attribute",
		ResultReasonAttributeInstanceNotFound:           "Attribute Instance Not Found",
		ResultReasonAttributeNotFound:                   "Attribute Not Found",
		ResultReasonAttributeReadOnly:                   "Attribute Read Only",
		ResultReasonAttributeSingleValued:               "Attribute Single Valued",
		ResultReasonBadCryptographicParameters:          "Bad Cryptographic Parameters",
		ResultReasonBadPassword:                         "Bad Password",
		ResultReasonCodecError:                          "Codec Error",
		ResultReasonIllegalObjectType:                   "Illegal Object Type",
		ResultReasonIncompatibleCryptographicUsageMask:  "Incompatible Cryptographic Usage Mask",
		ResultReasonInternalServerError:                 "Internal Server Error",
		ResultReasonInvalidAsynchronousCorrelationValue: "Invalid Asynchronous Correlation Value",
		ResultReasonInvalidAttribute:                    "Invalid Attribute",
		ResultReasonInvalidAttributeValue:               "Invalid Attribute Value",
		ResultReasonInvalidCorrelationValue:             "Invalid Correlation Value",
		ResultReasonInvalidCSR:                          "Invalid CSR",
		ResultReasonInvalidObjectType:                   "Invalid Object Type",
		ResultReasonKeyWrapTypeNotSupported:             "Key Wrap Type Not Supported",
		ResultReasonMissingInitializationVector:         "Missing Initialization Vector",
		ResultReasonNonUniqueNameAttribute:              "Non Unique Name Attribute",
		ResultReasonObjectDestroyed:                     "Object Destroyed",
		ResultReasonObjectNotFound:                      "Object Not Found",
		ResultReasonNotAuthorized:                       "Not Authorized",
		ResultReasonServerLimitExceeded:                 "Server Limit Exceeded",
		ResultReasonUnknownEnumeration:                  "Unknown Enumeration",
		ResultReasonUnknownMessageExtension:             "Unknown Message Extension",
		ResultReasonUnknownTag:                          "Unknown Tag",
		ResultReasonUnsupportedCryptographicParameters:  "Unsupported Cryptographic Parameters",
		ResultReasonUnsupportedProtocolVersion:          "Unsupported Protocol Version",
		ResultReasonWrappingObjectArchived:              "Wrapping Object Archived",
		ResultReasonWrappingObjectDestroyed:             "Wrapping Object Destroyed",
		ResultReasonWrappingObjectNotFound:              "Wrapping Object Not Found",
		ResultReasonWrongKeyLifecycleState:              "Wrong Key Lifecycle State",
		ResultReasonProtectionStorageUnavailable:        "Protection Storage Unavailable",
		ResultReasonPKCS_11CodecError:                   "PKCS#11 Codec Error ",
		ResultReasonPKCS_11InvalidFunction:              "PKCS#11 Invalid Function ",
		ResultReasonPKCS_11InvalidInterface:             "PKCS#11 Invalid Interface",
		ResultReasonGeneralFailure:                      "General Failure",
	}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (r ResultReason) MarshalText() (text []byte, err error) {
	return []byte(r.String()), nil
}

func (r ResultReason) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(r))
	return nil
}

func (r ResultReason) String() string {
	return ttlv.FormatEnum(uint32(r), &ResultReasonEnum)
}

// Adjustment Type Enumeration
// 11.1
type AdjustmentType uint32

const (
	AdjustmentTypeIncrement AdjustmentType = 0x00000001
	AdjustmentTypeDecrement AdjustmentType = 0x00000002
	AdjustmentTypeNegate    AdjustmentType = 0x00000003
)

var AdjustmentTypeEnum = NewAdjustmentTypeEnum()

func NewAdjustmentTypeEnum() ttlv.Enum {
	m := map[AdjustmentType]string{
		AdjustmentTypeIncrement: "Increment",
		AdjustmentTypeDecrement: "Decrement",
		AdjustmentTypeNegate:    "Negate",
	}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (a AdjustmentType) MarshalText() (text []byte, err error) {
	return []byte(a.String()), nil
}

func (a AdjustmentType) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(a))
	return nil
}

func (a AdjustmentType) String() string {
	return ttlv.FormatEnum(uint32(a), &AdjustmentTypeEnum)
}

// Asynchronous Indicator Enumeration
// 11.3
type AsynchronousIndicator uint32

const (
	AsynchronousIndicatorMandatory  AsynchronousIndicator = 0x00000001
	AsynchronousIndicatorOptional   AsynchronousIndicator = 0x00000002
	AsynchronousIndicatorProhibited AsynchronousIndicator = 0x00000003
)

var AsynchronousIndicatorEnum = NewAsynchronousIndicatorEnum()

func NewAsynchronousIndicatorEnum() ttlv.Enum {
	m := map[AsynchronousIndicator]string{
		AsynchronousIndicatorMandatory:  "Mandatory",
		AsynchronousIndicatorOptional:   "Optional",
		AsynchronousIndicatorProhibited: "Prohibited",
	}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (a AsynchronousIndicator) MarshalText() (text []byte, err error) {
	return []byte(a.String()), nil
}

func (a AsynchronousIndicator) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(a))
	return nil
}

func (a AsynchronousIndicator) String() string {
	return ttlv.FormatEnum(uint32(a), &AsynchronousIndicatorEnum)
}

// Data Enumeration
// 11.13
type Data uint32

const (
	DataDecrypt           Data = 0x00000001
	DataEncrypt           Data = 0x00000002
	DataHash              Data = 0x00000003
	DataMACMACData        Data = 0x00000004
	DataRNGRetrieve       Data = 0x00000005
	DataSignSignatureData Data = 0x00000006
	DataSignatureVerify   Data = 0x00000007
)

var DataEnum = NewDataEnum()

func NewDataEnum() ttlv.Enum {
	m := map[Data]string{
		DataDecrypt:           "Decrypt",
		DataEncrypt:           "Encrypt",
		DataHash:              "Hash",
		DataMACMACData:        "MAC MAC Data",
		DataRNGRetrieve:       "RNG Retrieve",
		DataSignSignatureData: "Sign Signature Data",
		DataSignatureVerify:   "Signature Verify",
	}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (d Data) MarshalText() (text []byte, err error) {
	return []byte(d.String()), nil
}

func (d Data) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(d))
	return nil
}

func (d Data) String() string {
	return ttlv.FormatEnum(uint32(d), &DataEnum)
}

// Endpoint Role Enumeration
// 11.19
type EndpointRole uint32

const (
	EndpointRoleClient EndpointRole = 0x00000001
	EndpointRoleServer EndpointRole = 0x00000002
)

var EndpointRoleEnum = NewEndpointRoleEnum()

func NewEndpointRoleEnum() ttlv.Enum {
	m := map[EndpointRole]string{
		EndpointRoleClient: "Client",
		EndpointRoleServer: "Server",
	}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (e EndpointRole) MarshalText() (text []byte, err error) {
	return []byte(e.String()), nil
}

func (e EndpointRole) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(e))
	return nil
}

func (e EndpointRole) String() string {
	return ttlv.FormatEnum(uint32(e), &EndpointRoleEnum)
}

// Interop Function Enumeration
// 11.22
type InteropFunction uint32

const (
	InteropFunctionBegin InteropFunction = 0x00000001
	InteropFunctionEnd   InteropFunction = 0x00000002
	InteropFunctionReset InteropFunction = 0x00000003
)

var InteropFunctionEnum = NewInteropFunctionEnum()

func NewInteropFunctionEnum() ttlv.Enum {
	m := map[InteropFunction]string{
		InteropFunctionBegin: "Begin",
		InteropFunctionEnd:   "End",
		InteropFunctionReset: "Reset",
	}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (i InteropFunction) MarshalText() (text []byte, err error) {
	return []byte(i.String()), nil
}

func (i InteropFunction) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(i))
	return nil
}

func (i InteropFunction) String() string {
	return ttlv.FormatEnum(uint32(i), &InteropFunctionEnum)
}

// NIST Key Type Enumeration
//
type NISTKeyType uint32

const (
	NISTKeyTypePrivateSignatureKey                NISTKeyType = 0x00000001
	NISTKeyTypePublicSignatureVerificationKey     NISTKeyType = 0x00000002
	NISTKeyTypeSymmetricAuthenticationKey         NISTKeyType = 0x00000003
	NISTKeyTypePrivateAuthenticationKey           NISTKeyType = 0x00000004
	NISTKeyTypePublicAuthenticationKey            NISTKeyType = 0x00000005
	NISTKeyTypeSymmetricDataEncryptionKey         NISTKeyType = 0x00000006
	NISTKeyTypeSymmetricKeyWrappingKey            NISTKeyType = 0x00000007
	NISTKeyTypeSymmetricRandomNumberGenerationKey NISTKeyType = 0x00000008
	NISTKeyTypeSymmetricMasterKey                 NISTKeyType = 0x00000009
	NISTKeyTypePrivateKeyTransportKey             NISTKeyType = 0x0000000a
	NISTKeyTypePublicKeyTransportKey              NISTKeyType = 0x0000000b
	NISTKeyTypeSymmetricKeyAgreementKey           NISTKeyType = 0x0000000c
	NISTKeyTypePrivateStaticKeyAgreementKey       NISTKeyType = 0x0000000d
	NISTKeyTypePublicStaticKeyAgreementKey        NISTKeyType = 0x0000000e
	NISTKeyTypePrivateEphemeralKeyAgreementKey    NISTKeyType = 0x0000000f
	NISTKeyTypePublicEphemeralKeyAgreementKey     NISTKeyType = 0x00000010
	NISTKeyTypeSymmetricAuthorizationKey          NISTKeyType = 0x00000011
	NISTKeyTypePrivateAuthorizationKey            NISTKeyType = 0x00000012
	NISTKeyTypePublicAuthorizationKey             NISTKeyType = 0x00000013
)

var NISTKeyTypeEnum = NewNISTKeyTypeEnum()

func NewNISTKeyTypeEnum() ttlv.Enum {
	m := map[NISTKeyType]string{
		NISTKeyTypePrivateSignatureKey:                "Private signature key",
		NISTKeyTypePublicSignatureVerificationKey:     "Public signature verification key",
		NISTKeyTypeSymmetricAuthenticationKey:         "Symmetric authentication key",
		NISTKeyTypePrivateAuthenticationKey:           "Private authentication key",
		NISTKeyTypePublicAuthenticationKey:            "Public authentication key",
		NISTKeyTypeSymmetricDataEncryptionKey:         "Symmetric data encryption key",
		NISTKeyTypeSymmetricKeyWrappingKey:            "Symmetric key wrapping key",
		NISTKeyTypeSymmetricRandomNumberGenerationKey: "Symmetric random number generation key",
		NISTKeyTypeSymmetricMasterKey:                 "Symmetric master key",
		NISTKeyTypePrivateKeyTransportKey:             "Private key transport key",
		NISTKeyTypePublicKeyTransportKey:              "Public key transport key",
		NISTKeyTypeSymmetricKeyAgreementKey:           "Symmetric key agreement key",
		NISTKeyTypePrivateStaticKeyAgreementKey:       "Private static key agreement key",
		NISTKeyTypePublicStaticKeyAgreementKey:        "Public static key agreement key",
		NISTKeyTypePrivateEphemeralKeyAgreementKey:    "Private ephemeral key agreement key",
		NISTKeyTypePublicEphemeralKeyAgreementKey:     "Public ephemeral key agreement key",
		NISTKeyTypeSymmetricAuthorizationKey:          "Symmetric authorization key",
		NISTKeyTypePrivateAuthorizationKey:            "Private authorization key",
		NISTKeyTypePublicAuthorizationKey:             "Public authorization key",
	}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (n NISTKeyType) MarshalText() (text []byte, err error) {
	return []byte(n.String()), nil
}

func (n NISTKeyType) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(n))
	return nil
}

func (n NISTKeyType) String() string {
	return ttlv.FormatEnum(uint32(n), &NISTKeyTypeEnum)
}

// PKCS#11 Function Enumeration
//
type PKCS_11Function uint32

const ()

var PKCS_11FunctionEnum = NewPKCS_11FunctionEnum()

func NewPKCS_11FunctionEnum() ttlv.Enum {
	m := map[PKCS_11Function]string{}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (p PKCS_11Function) MarshalText() (text []byte, err error) {
	return []byte(p.String()), nil
}

func (p PKCS_11Function) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(p))
	return nil
}

func (p PKCS_11Function) String() string {
	return ttlv.FormatEnum(uint32(p), &PKCS_11FunctionEnum)
}

// PKCS#11 Return Code Enumeration
//
type PKCS_11ReturnCode uint32

const ()

var PKCS_11ReturnCodeEnum = NewPKCS_11ReturnCodeEnum()

func NewPKCS_11ReturnCodeEnum() ttlv.Enum {
	m := map[PKCS_11ReturnCode]string{}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (p PKCS_11ReturnCode) MarshalText() (text []byte, err error) {
	return []byte(p.String()), nil
}

func (p PKCS_11ReturnCode) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(p))
	return nil
}

func (p PKCS_11ReturnCode) String() string {
	return ttlv.FormatEnum(uint32(p), &PKCS_11ReturnCodeEnum)
}

// Protection Level Enumeration
//
type ProtectionLevel uint32

const (
	ProtectionLevelHigh ProtectionLevel = 0x00000001
	ProtectionLevelLow  ProtectionLevel = 0x00000002
)

var ProtectionLevelEnum = NewProtectionLevelEnum()

func NewProtectionLevelEnum() ttlv.Enum {
	m := map[ProtectionLevel]string{
		ProtectionLevelHigh: "High",
		ProtectionLevelLow:  "Low",
	}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (p ProtectionLevel) MarshalText() (text []byte, err error) {
	return []byte(p.String()), nil
}

func (p ProtectionLevel) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(p))
	return nil
}

func (p ProtectionLevel) String() string {
	return ttlv.FormatEnum(uint32(p), &ProtectionLevelEnum)
}

// Ticket Type Enumeration
//
type TicketType uint32

const (
	TicketTypeLogin TicketType = 0x00000001
)

var TicketTypeEnum = NewTicketTypeEnum()

func NewTicketTypeEnum() ttlv.Enum {
	m := map[TicketType]string{
		TicketTypeLogin: "Login",
	}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (t TicketType) MarshalText() (text []byte, err error) {
	return []byte(t.String()), nil
}

func (t TicketType) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(t))
	return nil
}

func (t TicketType) String() string {
	return ttlv.FormatEnum(uint32(t), &TicketTypeEnum)
}

// Unique Identifier Enumeration
//
type UniqueIdentifier uint32

const (
	UniqueIdentifierIDPlaceholder           UniqueIdentifier = 0x00000001
	UniqueIdentifierCertify                 UniqueIdentifier = 0x00000002
	UniqueIdentifierCreate                  UniqueIdentifier = 0x00000003
	UniqueIdentifierCreateKeyPair           UniqueIdentifier = 0x00000004
	UniqueIdentifierCreateKeyPairPrivateKey UniqueIdentifier = 0x00000005
	UniqueIdentifierCreateKeyPairPublicKey  UniqueIdentifier = 0x00000006
	UniqueIdentifierCreateSplitKey          UniqueIdentifier = 0x00000007
	UniqueIdentifierDeriveKey               UniqueIdentifier = 0x00000008
	UniqueIdentifierImport                  UniqueIdentifier = 0x00000009
	UniqueIdentifierJoinSplitKey            UniqueIdentifier = 0x0000000a
	UniqueIdentifierLocate                  UniqueIdentifier = 0x0000000b
	UniqueIdentifierRegister                UniqueIdentifier = 0x0000000c
	UniqueIdentifierReKey                   UniqueIdentifier = 0x0000000d
	UniqueIdentifierReCertify               UniqueIdentifier = 0x0000000e
	UniqueIdentifierReKeyKeyPair            UniqueIdentifier = 0x0000000f
	UniqueIdentifierReKeyKeyPairPrivateKey  UniqueIdentifier = 0x00000010
	UniqueIdentifierReKeyKeyPairPublicKey   UniqueIdentifier = 0x00000011
)

var UniqueIdentifierEnum = NewUniqueIdentifierEnum()

func NewUniqueIdentifierEnum() ttlv.Enum {
	m := map[UniqueIdentifier]string{
		UniqueIdentifierIDPlaceholder:           "ID Placeholder",
		UniqueIdentifierCertify:                 "Certify",
		UniqueIdentifierCreate:                  "Create",
		UniqueIdentifierCreateKeyPair:           "Create Key Pair",
		UniqueIdentifierCreateKeyPairPrivateKey: "Create Key Pair Private Key",
		UniqueIdentifierCreateKeyPairPublicKey:  "Create Key Pair Public Key",
		UniqueIdentifierCreateSplitKey:          "Create Split Key",
		UniqueIdentifierDeriveKey:               "Derive Key",
		UniqueIdentifierImport:                  "Import",
		UniqueIdentifierJoinSplitKey:            "Join Split Key",
		UniqueIdentifierLocate:                  "Locate",
		UniqueIdentifierRegister:                "Register",
		UniqueIdentifierReKey:                   "Re-key",
		UniqueIdentifierReCertify:               "Re-certify",
		UniqueIdentifierReKeyKeyPair:            "Re-key Key Pair",
		UniqueIdentifierReKeyKeyPairPrivateKey:  "Re-key Key Pair Private Key",
		UniqueIdentifierReKeyKeyPairPublicKey:   "Re-key Key Pair Public Key",
	}

	e := ttlv.NewEnum()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (u UniqueIdentifier) MarshalText() (text []byte, err error) {
	return []byte(u.String()), nil
}

func (u UniqueIdentifier) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeEnumeration(tag, uint32(u))
	return nil
}

func (u UniqueIdentifier) String() string {
	return ttlv.FormatEnum(uint32(u), &UniqueIdentifierEnum)
}

// Protection Storage Mask Bit Mask
//
type ProtectionStorageMask uint32

const (
	ProtectionStorageMaskSoftware         ProtectionStorageMask = 0x00000001
	ProtectionStorageMaskHardware         ProtectionStorageMask = 0x00000002
	ProtectionStorageMaskOnProcessor      ProtectionStorageMask = 0x00000004
	ProtectionStorageMaskOnSystem         ProtectionStorageMask = 0x00000008
	ProtectionStorageMaskOffSystem        ProtectionStorageMask = 0x00000010
	ProtectionStorageMaskHypervisor       ProtectionStorageMask = 0x00000020
	ProtectionStorageMaskOperatingSystem  ProtectionStorageMask = 0x00000040
	ProtectionStorageMaskContainer        ProtectionStorageMask = 0x00000080
	ProtectionStorageMaskOnPremises       ProtectionStorageMask = 0x00000100
	ProtectionStorageMaskOffPremises      ProtectionStorageMask = 0x00000200
	ProtectionStorageMaskSelfManaged      ProtectionStorageMask = 0x00000400
	ProtectionStorageMaskOutsourced       ProtectionStorageMask = 0x00000800
	ProtectionStorageMaskValidated        ProtectionStorageMask = 0x00001000
	ProtectionStorageMaskSameJurisdiction ProtectionStorageMask = 0x00002000
)

var ProtectionStorageMaskEnum = NewProtectionStorageMaskEnum()

func NewProtectionStorageMaskEnum() ttlv.Enum {
	m := map[ProtectionStorageMask]string{
		ProtectionStorageMaskSoftware:         "Software",
		ProtectionStorageMaskHardware:         "Hardware",
		ProtectionStorageMaskOnProcessor:      "On Processor",
		ProtectionStorageMaskOnSystem:         "On System",
		ProtectionStorageMaskOffSystem:        "Off System",
		ProtectionStorageMaskHypervisor:       "Hypervisor",
		ProtectionStorageMaskOperatingSystem:  "Operating System",
		ProtectionStorageMaskContainer:        "Container",
		ProtectionStorageMaskOnPremises:       "On Premises",
		ProtectionStorageMaskOffPremises:      "Off Premises",
		ProtectionStorageMaskSelfManaged:      "Self Managed",
		ProtectionStorageMaskOutsourced:       "Outsourced",
		ProtectionStorageMaskValidated:        "Validated",
		ProtectionStorageMaskSameJurisdiction: "Same Jurisdiction",
	}

	e := ttlv.NewBitmask()
	for v, name := range m {
		e.RegisterValue(uint32(v), name)
	}

	return e
}

func (p ProtectionStorageMask) MarshalText() (text []byte, err error) {
	return []byte(p.String()), nil
}

func (p ProtectionStorageMask) MarshalTTLV(enc *ttlv.Encoder, tag ttlv.Tag) error {
	enc.EncodeInteger(tag, int32(p))
	return nil
}

func (p ProtectionStorageMask) String() string {
	return ttlv.FormatInt(int32(p), &ProtectionStorageMaskEnum)
}

func RegisterGeneratedDefinitions(r *ttlv.Registry) {

	tags := map[ttlv.Tag]string{
		TagAttributes:                         "Attributes",
		TagCommonAttributes:                   "Common Attributes",
		TagPrivateKeyAttributes:               "Private Key Attributes",
		TagPublicKeyAttributes:                "Public Key Attributes",
		TagExtensionEnumeration:               "Extension Enumeration",
		TagExtensionAttribute:                 "Extension Attribute",
		TagExtensionParentStructureTag:        "Extension Parent Structure Tag",
		TagExtensionDescription:               "Extension Description",
		TagServerName:                         "Server Name",
		TagServerSerialNumber:                 "Server Serial Number",
		TagServerVersion:                      "Server Version",
		TagServerLoad:                         "Server Load",
		TagProductName:                        "Product Name",
		TagBuildLevel:                         "Build Level",
		TagBuildDate:                          "Build Date",
		TagClusterInfo:                        "Cluster Info",
		TagAlternateFailoverEndpoints:         "Alternate Failover Endpoints",
		TagShortUniqueIdentifier:              "Short Unique Identifier",
		TagReserved:                           "Reserved",
		TagTag:                                "Tag",
		TagCertificateRequestUniqueIdentifier: "Certificate Request Unique Identifier",
		TagNISTKeyType:                        "NIST Key Type",
		TagAttributeReference:                 "Attribute Reference",
		TagCurrentAttribute:                   "Current Attribute",
		TagNewAttribute:                       "New Attribute",
		TagCertificateRequestValue:            "Certificate Request Value",
		TagLogMessage:                         "Log Message",
		TagProfileVersion:                     "Profile Version",
		TagProfileVersionMajor:                "Profile Version Major",
		TagProfileVersionMinor:                "Profile Version Minor",
		TagProtectionLevel:                    "Protection Level",
		TagProtectionPeriod:                   "Protection Period",
		TagQuantumSafe:                        "Quantum Safe",
		TagQuantumSafeCapability:              "Quantum Safe Capability",
		TagTicket:                             "Ticket",
		TagTicketType:                         "Ticket Type",
		TagTicketValue:                        "Ticket Value",
		TagRequestCount:                       "Request Count",
		TagRights:                             "Rights",
		TagObjects:                            "Objects",
		TagOperations:                         "Operations",
		TagRight:                              "Right",
		TagEndpointRole:                       "Endpoint Role",
		TagDefaultsInformation:                "Defaults Information",
		TagObjectDefaults:                     "Object Defaults",
		TagEphemeral:                          "Ephemeral",
		TagServerHashedPassword:               "Server Hashed Password",
		TagOneTimePassword:                    "One Time Password",
		TagHashedPassword:                     "Hashed Password",
		TagAdjustmentType:                     "Adjustment Type",
		TagPKCS_11Interface:                   "PKCS#11 Interface",
		TagPKCS_11Function:                    "PKCS#11 Function",
		TagPKCS_11InputParameters:             "PKCS#11 Input Parameters",
		TagPKCS_11OutputParameters:            "PKCS#11 Output Parameters",
		TagPKCS_11ReturnCode:                  "PKCS#11 Return Code",
		TagProtectionStorageMask:              "Protection Storage Mask",
		TagProtectionStorageMasks:             "Protection Storage Masks",
		TagInteropFunction:                    "Interop Function",
		TagInteropIdentifier:                  "Interop Identifier",
		TagAdjustmentValue:                    "Adjustment Value",
		TagCommonProtectionStorageMasks:       "Common Protection Storage Masks",
		TagPrivateProtectionStorageMasks:      "Private Protection Storage Masks",
		TagPublicProtectionStorageMasks:       "Public Protection Storage Masks",
	}

	for v, name := range tags {
		r.RegisterTag(v, name)
	}

	enums := map[string]ttlv.Enum{
		"CredentialType":         CredentialTypeEnum,
		"CryptographicAlgorithm": CryptographicAlgorithmEnum,
		"DerivationMethod":       DerivationMethodEnum,
		"LinkType":               LinkTypeEnum,
		"ObjectType":             ObjectTypeEnum,
		"Operation":              OperationEnum,
		"ProfileName":            ProfileNameEnum,
		"QueryFunction":          QueryFunctionEnum,
		"RecommendedCurve":       RecommendedCurveEnum,
		"ResultReason":           ResultReasonEnum,
		"AdjustmentType":         AdjustmentTypeEnum,
		"AsynchronousIndicator":  AsynchronousIndicatorEnum,
		"Data":                   DataEnum,
		"EndpointRole":           EndpointRoleEnum,
		"InteropFunction":        InteropFunctionEnum,
		"NISTKeyType":            NISTKeyTypeEnum,
		"PKCS_11Function":        PKCS_11FunctionEnum,
		"PKCS_11ReturnCode":      PKCS_11ReturnCodeEnum,
		"ProtectionLevel":        ProtectionLevelEnum,
		"TicketType":             TicketTypeEnum,
		"UniqueIdentifier":       UniqueIdentifierEnum,
		"Link":                   UniqueIdentifierEnum,

		"ProtectionStorageMask": ProtectionStorageMaskEnum,
	}

	for tagName, enum := range enums {
		tag, err := ttlv.DefaultRegistry.ParseTag(tagName)
		if err != nil {
			panic(err)
		}
		e := enum
		r.RegisterEnum(tag, &e)
	}
}
